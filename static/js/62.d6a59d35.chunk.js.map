{"version":3,"sources":["views/chat/ChatView/Settings.js","views/chat/ChatView/RecentThreads/Search.js","views/chat/ChatView/RecentThreads/ThreadItem.js","views/chat/ChatView/RecentThreads/ThreadList.js","views/chat/ChatView/RecentThreads/index.js","views/chat/ChatView/Thread/ComposeHeader.js","views/chat/ChatView/Thread/DetailHeader.js","views/chat/ChatView/Thread/MessageItem.js","views/chat/ChatView/Thread/MessageList.js","views/chat/ChatView/Thread/MessageComposer.js","views/chat/ChatView/Thread/index.js","views/chat/ChatView/index.js"],"names":["useStyles","makeStyles","theme","root","display","alignItems","height","paddingLeft","spacing","paddingRight","Settings","className","rest","classes","clsx","Typography","variant","color","Box","flexGrow","IconButton","SvgIcon","fontSize","component","RouterLink","to","search","borderRadius","backgroundColor","palette","background","dark","searchInput","marginLeft","avatar","width","Search","forwardRef","ref","isFocused","onChange","onClickAway","onFocus","onSelect","query","results","displayResults","ClickAwayListener","Input","disableUnderline","placeholder","value","mt","List","map","result","ListItem","button","key","id","onClick","handleSelect","ListItemAvatar","Avatar","src","ListItemText","primary","name","primaryTypographyProps","noWrap","defaultProps","active","action","selected","boxShadow","secondary","main","smallAvatar","marginTop","unreadIndicator","minWidth","padding","ThreadItem","thread","details","currentUserId","otherParticipants","participants","filter","participant","displayNames","reduce","names","join","displayText","lastMessage","messages","length","sender","senderId","message","contentType","body","getDetails","AvatarGroup","max","alt","secondaryTypographyProps","ml","flexDirection","unreadCount","Chip","size","label","ThreadList","useSelector","state","chat","threads","activeThreadId","history","useHistory","allIds","threadId","byId","threadKey","type","find","username","push","hideThreadList","RecentThreads","useState","isSearchFocused","setSearchFocused","searchQuery","setSearchQuery","searchResults","setSearchResults","handleSearchChange","event","a","persist","target","axios","get","params","response","data","console","error","options","suppressScrollX","container","recipient","marginRight","input","default","compactInput","maxWidth","ComposeHeader","onAddRecipient","onRemoveRecipient","recipients","containerRef","useRef","setQuery","filteredSearchResults","recipientIds","acc","includes","getFilteredSearchResults","onDelete","recipientId","onBlur","Popper","anchorEl","current","open","placement","Paper","pb","pt","px","textAlign","gutterBottom","contact","borderBottom","divider","flexShrink","minHeight","paddingBottom","paddingTop","DetailHeader","moreRef","openMenu","setOpenMenu","Tooltip","title","Menu","keepMounted","elevation","onClose","MenuItem","ListItemIcon","marginBottom","image","cursor","MessageItem","user","useAuth","selectedImage","setSelectedImage","_participant","senderDetails","bgcolor","py","Link","justifyContent","moment","createdAt","fromNow","large","propTypes","PropTypes","string","object","isRequired","MessageList","scrollRef","useEffect","_container","scrollTop","scrollHeight","inputContainer","fileInput","MessageComposer","disabled","onSend","fileInputRef","setBody","handleAttach","click","handleSend","fullWidth","onKeyUp","keyCode","Divider","edge","Thread","dispatch","useDispatch","useParams","unreadMessages","threadSelector","mode","handleSendMessage","getParticipants","getThread","resetActiveThread","markThreadAsSeen","addRecipient","removeRecipient","overflow","position","sidebar","borderRight","ChatView","pageRef","getThreads","Page"],"mappings":"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","file":"static/js/62.d6a59d35.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Box,\r\n  IconButton,\r\n  SvgIcon,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport {\r\n  Settings as SettingsIcon,\r\n  Edit as EditIcon\r\n} from 'react-feather';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    height: 64,\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nconst Settings = ({ className, ...rest }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Typography\r\n        variant=\"h3\"\r\n        color=\"textPrimary\"\r\n      >\r\n        Chats\r\n      </Typography>\r\n      <Box flexGrow={1} />\r\n      <IconButton>\r\n        <SvgIcon fontSize=\"small\">\r\n          <SettingsIcon />\r\n        </SvgIcon>\r\n      </IconButton>\r\n      <IconButton\r\n        component={RouterLink}\r\n        to=\"/app/chat/new\"\r\n      >\r\n        <SvgIcon fontSize=\"small\">\r\n          <EditIcon />\r\n        </SvgIcon>\r\n      </IconButton>\r\n    </div>\r\n  );\r\n};\r\n\r\nSettings.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default Settings;\r\n","import React, { forwardRef } from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  ClickAwayListener,\r\n  Input,\r\n  SvgIcon,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport { Search as SearchIcon } from 'react-feather';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(1),\r\n    paddingRight: theme.spacing(1)\r\n  },\r\n  search: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    height: 44,\r\n    borderRadius: 22,\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(2),\r\n    backgroundColor: theme.palette.background.dark\r\n  },\r\n  searchInput: {\r\n    flexGrow: 1,\r\n    marginLeft: theme.spacing(1)\r\n  },\r\n  avatar: {\r\n    height: 32,\r\n    width: 32\r\n  }\r\n}));\r\n\r\nconst Search = forwardRef(({\r\n  className,\r\n  isFocused,\r\n  onChange,\r\n  onClickAway,\r\n  onFocus,\r\n  onSelect,\r\n  query,\r\n  results,\r\n  ...rest\r\n}, ref) => {\r\n  const classes = useStyles();\r\n\r\n  const displayResults = query && isFocused;\r\n\r\n  const handleSelect = (result) => {\r\n    if (onSelect) {\r\n      onSelect(result);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ClickAwayListener onClickAway={onClickAway}>\r\n      <div\r\n        className={clsx(classes.root, className)}\r\n        ref={ref}\r\n        {...rest}\r\n      >\r\n        <div className={classes.search}>\r\n          <SvgIcon\r\n            fontSize=\"small\"\r\n            color=\"action\"\r\n          >\r\n            <SearchIcon />\r\n          </SvgIcon>\r\n          <Input\r\n            className={classes.searchInput}\r\n            disableUnderline\r\n            onChange={onChange}\r\n            onFocus={onFocus}\r\n            placeholder=\"Search contacts\"\r\n            value={query}\r\n          />\r\n        </div>\r\n        {displayResults && (\r\n          <Box mt={2}>\r\n            <Typography\r\n              variant=\"h6\"\r\n              color=\"textSecondary\"\r\n            >\r\n              Contacts\r\n            </Typography>\r\n            <List>\r\n              {results.map((result) => {\r\n                return (\r\n                  <ListItem\r\n                    button\r\n                    key={result.id}\r\n                    onClick={() => handleSelect(result)}\r\n                  >\r\n                    <ListItemAvatar>\r\n                      <Avatar\r\n                        src={result.avatar}\r\n                        className={classes.avatar}\r\n                      />\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                      primary={result.name}\r\n                      primaryTypographyProps={{\r\n                        noWrap: true,\r\n                        variant: 'h6',\r\n                        color: 'textPrimary'\r\n                      }}\r\n                    />\r\n                  </ListItem>\r\n                );\r\n              })}\r\n            </List>\r\n          </Box>\r\n        )}\r\n      </div>\r\n    </ClickAwayListener>\r\n  );\r\n});\r\n\r\nSearch.propTypes = {\r\n  className: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  onClickAway: PropTypes.func,\r\n  onFocus: PropTypes.func,\r\n  onSelect: PropTypes.func,\r\n  query: PropTypes.string,\r\n  results: PropTypes.array\r\n};\r\n\r\nSearch.defaultProps = {\r\n  isFocused: false,\r\n  query: '',\r\n  results: []\r\n};\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Chip,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport { AvatarGroup } from '@material-ui/lab';\r\n\r\nconst getDetails = (thread, currentUserId) => {\r\n  const otherParticipants = thread.participants.filter((participant) => participant.id !== currentUserId);\r\n  const displayNames = otherParticipants.reduce((names, participant) => [...names, participant.name], []).join(', ');\r\n  let displayText = ''\r\n  const lastMessage = thread.messages[thread.messages.length - 1];\r\n\r\n  if (lastMessage) {\r\n    const sender = lastMessage.senderId === currentUserId ? 'Me: ' : '';\r\n    const message = lastMessage.contentType === 'image' ? 'Sent a photo' : lastMessage.body;\r\n    \r\n    displayText = `${sender}${message}`\r\n  }\r\n\r\n  return {\r\n    otherParticipants,\r\n    displayNames,\r\n    displayText\r\n  };\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  active: {\r\n    backgroundColor: theme.palette.action.selected,\r\n    boxShadow: `inset 4px 0px 0px ${theme.palette.secondary.main}`\r\n  },\r\n  smallAvatar: {\r\n    height: 30,\r\n    width: 30,\r\n    '&:first-child': {\r\n      marginTop: 10\r\n    }\r\n  },\r\n  unreadIndicator: {\r\n    height: 18,\r\n    marginTop: 2,\r\n    minWidth: 18,\r\n    padding: 2\r\n  }\r\n}));\r\n\r\nconst ThreadItem = ({\r\n  active,\r\n  className,\r\n  thread,\r\n  onSelect,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  // We hardcode the current user ID because the mocked that is not in sync with the auth provider.\r\n  // When implementing this app with a real database, replace this ID with the ID from Auth Context.\r\n  const details = getDetails(thread, '5e86809283e28b96d2d38537');\r\n\r\n  return (\r\n    <ListItem\r\n      button\r\n      className={clsx(\r\n        { [classes.active]: active },\r\n        className\r\n      )}\r\n      onClick={onSelect}\r\n      {...rest}\r\n    >\r\n      <ListItemAvatar>\r\n        <AvatarGroup\r\n          classes={{ avatar: details.otherParticipants.length > 1 ? classes.smallAvatar : null }}\r\n          max={2}\r\n        >\r\n          {details.otherParticipants.map((participant) => (\r\n            <Avatar\r\n              alt=\"Person\"\r\n              key={participant.id}\r\n              src={participant.avatar}\r\n            />\r\n          ))}\r\n        </AvatarGroup>\r\n      </ListItemAvatar>\r\n      <ListItemText\r\n        primary={details.displayNames}\r\n        primaryTypographyProps={{\r\n          noWrap: true,\r\n          variant: 'h6',\r\n          color: 'textPrimary'\r\n        }}\r\n        secondary={details.displayText}\r\n        secondaryTypographyProps={{\r\n          noWrap: true,\r\n          variant: 'body2',\r\n          color: 'textSecondary'\r\n        }}\r\n      />\r\n      <Box\r\n        ml={2}\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        {thread.unreadCount > 0 && (\r\n          <Chip\r\n            className={classes.unreadIndicator}\r\n            color=\"secondary\"\r\n            size=\"small\"\r\n            label={thread.unreadCount}\r\n          />\r\n        )}\r\n      </Box>\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nThreadItem.propTypes = {\r\n  active: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  onSelect: PropTypes.func,\r\n  thread: PropTypes.object.isRequired\r\n};\r\n\r\nThreadItem.defaultProps = {\r\n  active: false,\r\n  onSelect: () => { }\r\n};\r\n\r\nexport default ThreadItem;\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport { List, makeStyles } from '@material-ui/core';\r\nimport { useSelector } from 'src/store';\r\nimport ThreadItem from './ThreadItem';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {}\r\n}));\r\n\r\nconst ThreadList = ({ className, ...rest }) => {\r\n  const classes = useStyles();\r\n  const { threads, activeThreadId } = useSelector((state) => state.chat);\r\n  const history = useHistory();\r\n\r\n  const handleSelect = (threadId) => {\r\n    const thread = threads.byId[threadId];\r\n    let threadKey = '';\r\n\r\n    if (thread.type === 'GROUP') {\r\n      threadKey = thread.id;\r\n    } else {\r\n      // We hardcode the current user ID because the mocked that is not in sync with the auth provider.\r\n      // When implementing this app with a real database, replace this ID with the ID from Auth Context.\r\n      const otherParticipant = thread.participants.find((participant) => participant.id !== '5e86809283e28b96d2d38537');\r\n\r\n      threadKey = otherParticipant.username;\r\n    }\r\n\r\n    history.push(`/app/chat/${threadKey}`);\r\n  };\r\n\r\n  return (\r\n    <List\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      {threads.allIds.map((threadId) => (\r\n        <ThreadItem\r\n          active={activeThreadId === threadId}\r\n          key={threadId}\r\n          onSelect={() => handleSelect(threadId)}\r\n          thread={threads.byId[threadId]}\r\n        />\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nThreadList.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default ThreadList;\r\n","import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { useHistory } from 'react-router-dom';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport axios from 'src/utils/axios';\r\nimport Search from './Search';\r\nimport ThreadList from './ThreadList';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  hideThreadList: {\r\n    display: 'none'\r\n  }\r\n}));\r\n\r\nconst RecentThreads = () => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [isSearchFocused, setSearchFocused] = useState(false);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  const handleSearchClickAway = () => {\r\n    setSearchFocused(false);\r\n    setSearchQuery('');\r\n  };\r\n\r\n  const handleSearchChange = async (event) => {\r\n    try {\r\n      event.persist();\r\n\r\n      const { value } = event.target;\r\n\r\n      setSearchQuery(value);\r\n\r\n      if (value) {\r\n        const response = await axios.get('/api/chat/search', {\r\n          params: {\r\n            query: value\r\n          }\r\n        });\r\n\r\n        setSearchResults(response.data.results);\r\n      } else {\r\n        setSearchResults([]);\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  const handleSearchFocus = (event) => {\r\n    event.persist();\r\n    setSearchFocused(true);\r\n  };\r\n\r\n  const handleSearchSelect = (result) => {\r\n    setSearchFocused(false);\r\n    setSearchQuery('');\r\n    history.push(`/app/chat/${result.username}`);\r\n  };\r\n\r\n  return (\r\n    <PerfectScrollbar options={{ suppressScrollX: true }}>\r\n      <Search\r\n        isFocused={isSearchFocused}\r\n        onChange={handleSearchChange}\r\n        onClickAway={handleSearchClickAway}\r\n        onFocus={handleSearchFocus}\r\n        onSelect={handleSearchSelect}\r\n        query={searchQuery}\r\n        results={searchResults}\r\n      />\r\n      <ThreadList className={clsx({ [classes.hideThreadList]: isSearchFocused })} />\r\n    </PerfectScrollbar>\r\n  );\r\n};\r\n\r\nexport default RecentThreads;\r\n","import React, {\r\n  useState,\r\n  useRef\r\n} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Chip,\r\n  ClickAwayListener,\r\n  Input,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  Paper,\r\n  Popper,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport axios from 'src/utils/axios';\r\n\r\nconst getFilteredSearchResults = (results, recipients) => {\r\n  const recipientIds = recipients.reduce((acc, recipient) => {\r\n    return [...acc, recipient.id];\r\n  }, []);\r\n\r\n  return results.filter((result) => !recipientIds.includes(result.id));\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    alignItems: 'center',\r\n    display: 'flex',\r\n    padding: theme.spacing(2)\r\n  },\r\n  container: {\r\n    marginLeft: theme.spacing(1)\r\n  },\r\n  recipient: {\r\n    marginLeft: 4,\r\n    marginRight: 4\r\n  },\r\n  input: {\r\n    backgroundColor: theme.palette.background.default,\r\n    borderRadius: 16,\r\n    height: 32,\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(2)\r\n  },\r\n  compactInput: {\r\n    maxWidth: 120\r\n  },\r\n  searchResults: {\r\n    marginTop: theme.spacing(1),\r\n    maxWidth: '100%',\r\n    width: 320\r\n  }\r\n}));\r\n\r\nconst ComposeHeader = ({\r\n  className,\r\n  onAddRecipient,\r\n  onRemoveRecipient,\r\n  recipients,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  const containerRef = useRef(null);\r\n  const [query, setQuery] = useState('');\r\n  const [isSearchFocused, setSearchFocused] = useState(true);\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  const filteredSearchResults = getFilteredSearchResults(searchResults, recipients);\r\n  const displayResults = query && isSearchFocused;\r\n\r\n  const handleSearchChange = async (event) => {\r\n    try {\r\n      event.persist();\r\n\r\n      const { value } = event.target;\r\n  \r\n      setQuery(value);\r\n\r\n      if (value) {\r\n        const response = await axios.get('/api/chat/search', {\r\n          params: {\r\n            query: value\r\n          }\r\n        });\r\n    \r\n        setSearchResults(response.data.results);\r\n      } else {\r\n        setSearchResults([]);\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  const handleSearchBlur = (event) => {\r\n    event.persist();\r\n\r\n    if (!displayResults) {\r\n      setSearchFocused(false);\r\n    }\r\n  };\r\n\r\n  const handleSearchFocus = (event) => {\r\n    event.persist();\r\n    setSearchFocused(true);\r\n  };\r\n\r\n  const handleSearchResultsClickAway = () => {\r\n    setSearchFocused(false);\r\n  };\r\n\r\n  const handleAddRecipient = (contact) => {\r\n    setQuery('');\r\n\r\n    if (onAddRecipient) {\r\n      onAddRecipient(contact);\r\n    }\r\n  };\r\n\r\n  const handleRemoveRecipient = (recipientId) => {\r\n    if (onRemoveRecipient) {\r\n      onRemoveRecipient(recipientId);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Typography\r\n        variant=\"body1\"\r\n        color=\"textSecondary\"\r\n      >\r\n        To:\r\n      </Typography>\r\n      <div\r\n        className={classes.container}\r\n        ref={containerRef}\r\n      >\r\n        {recipients.map((recipient) => (\r\n          <Chip\r\n            className={classes.recipient}\r\n            color=\"primary\"\r\n            key={recipient.id}\r\n            label={recipient.name}\r\n            onDelete={() => handleRemoveRecipient(recipient.id)}\r\n            size=\"small\"\r\n          />\r\n        ))}\r\n        <Input\r\n          className={clsx(classes.input, { [classes.compactInput]: recipients.length > 0 })}\r\n          disableUnderline\r\n          onBlur={handleSearchBlur}\r\n          onChange={handleSearchChange}\r\n          onFocus={handleSearchFocus}\r\n          placeholder={recipients.length === 0 ? 'Search contacts' : ''}\r\n          value={query}\r\n        />\r\n      </div>\r\n      {displayResults && (\r\n        <ClickAwayListener onClickAway={handleSearchResultsClickAway}>\r\n          <Popper\r\n            anchorEl={containerRef.current}\r\n            open={isSearchFocused}\r\n            placement=\"bottom-start\"\r\n          >\r\n            <Paper className={classes.searchResults}>\r\n              {filteredSearchResults.length === 0 ? (\r\n                <Box\r\n                  pb={2}\r\n                  pt={2}\r\n                  px={2}\r\n                  textAlign=\"center\"\r\n                >\r\n                  <Typography\r\n                    color=\"textPrimary\"\r\n                    gutterBottom\r\n                    variant=\"h4\"\r\n                  >\r\n                    Nothing Found\r\n                  </Typography>\r\n                  <Typography\r\n                    color=\"textSecondary\"\r\n                    variant=\"body2\"\r\n                  >\r\n                    We couldn&apos;t find any matches for &quot;\r\n                    {query}\r\n                    &quot;. Try checking for typos or using complete words.\r\n                  </Typography>\r\n                </Box>\r\n              ) : (\r\n                <>\r\n                  <Box\r\n                    px={2}\r\n                    pt={2}\r\n                  >\r\n                    <Typography\r\n                      color=\"textSecondary\"\r\n                      variant=\"h6\"\r\n                    >\r\n                      Contacts\r\n                    </Typography>\r\n                  </Box>\r\n                  <List>\r\n                    {filteredSearchResults.map((result) => (\r\n                      <ListItem\r\n                        button\r\n                        key={result.id}\r\n                        onClick={() => handleAddRecipient(result)}\r\n                      >\r\n                        <ListItemAvatar>\r\n                          <Avatar src={result.avatar} />\r\n                        </ListItemAvatar>\r\n                        <ListItemText\r\n                          primary={result.name}\r\n                          primaryTypographyProps={{\r\n                            color: 'textPrimary',\r\n                            noWrap: true,\r\n                            variant: 'h6'\r\n                          }}\r\n                        />\r\n                      </ListItem>\r\n                    ))}\r\n                  </List>\r\n                </>\r\n              )}\r\n            </Paper>\r\n          </Popper>\r\n        </ClickAwayListener>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nComposeHeader.propTypes = {\r\n  className: PropTypes.string,\r\n  onAddRecipient: PropTypes.func,\r\n  onRemoveRecipient: PropTypes.func,\r\n  recipients: PropTypes.array\r\n};\r\n\r\nComposeHeader.defaultProps = {\r\n  onAddRecipient: () => { },\r\n  onRemoveRecipient: () => { },\r\n  recipients: []\r\n};\r\n\r\nexport default ComposeHeader;\r\n","import React, {\r\n  useState,\r\n  useRef\r\n} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n  ListItemIcon,\r\n  ListItemText,\r\n  SvgIcon,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  Tooltip,\r\n  Avatar,\r\n  Box,\r\n  makeStyles,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport { AvatarGroup } from '@material-ui/lab';\r\nimport {\r\n  Archive as ArchiveIcon,\r\n  BellOff as BellOffIcon,\r\n  Camera as CameraIcon,\r\n  MoreVertical as MoreIcon,\r\n  Phone as PhoneIcon,\r\n  Slash as SlashIcon,\r\n  Trash as TrashIcon\r\n} from 'react-feather';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    alignItems: 'center',\r\n    backgroundColor: theme.palette.background.default,\r\n    borderBottom: `1px solid ${theme.palette.divider}`,\r\n    display: 'flex',\r\n    flexShrink: 0,\r\n    minHeight: 64,\r\n    paddingBottom: theme.spacing(1),\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(2),\r\n    paddingTop: theme.spacing(1)\r\n  },\r\n  smallAvatar: {\r\n    height: 30,\r\n    width: 30,\r\n    '&:first-child': {\r\n      marginTop: 10\r\n    }\r\n  }\r\n}));\r\n\r\nconst DetailHeader = ({\r\n  className,\r\n  participants,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  const moreRef = useRef(null);\r\n  const [openMenu, setOpenMenu] = useState(false);\r\n\r\n  // We hardcode the current user ID because the mocked that is not in sync with the auth provider.\r\n  // When implementing this app with a real database, replace this ID with the ID from Auth Context.\r\n  const otherParticipants = participants.filter((participant) => participant.id !== '5e86809283e28b96d2d38537');\r\n  const displayNames = otherParticipants.reduce((names, participant) => [...names, participant.name], []).join(', ');\r\n\r\n  const handleMenuOpen = () => {\r\n    setOpenMenu(true);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setOpenMenu(false);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Box\r\n        alignItems=\"center\"\r\n        display=\"flex\"\r\n      >\r\n        <AvatarGroup\r\n          classes={{ avatar: otherParticipants.length > 1 ? classes.smallAvatar : null}}\r\n          max={2}\r\n        >\r\n          {otherParticipants.map((participant) => (\r\n            <Avatar\r\n              alt=\"Person\"\r\n              key={participant.id}\r\n              src={participant.avatar}\r\n            />\r\n          ))}\r\n        </AvatarGroup>\r\n        <Typography\r\n          color=\"textPrimary\"\r\n          variant=\"h5\"\r\n        >\r\n          {displayNames}\r\n        </Typography>\r\n      </Box>\r\n      <Box flexGrow={1} />\r\n      <IconButton>\r\n        <SvgIcon fontSize=\"small\">\r\n          <PhoneIcon />\r\n        </SvgIcon>\r\n      </IconButton>\r\n      <IconButton>\r\n        <SvgIcon fontSize=\"small\">\r\n          <CameraIcon />\r\n        </SvgIcon>\r\n      </IconButton>\r\n      <Tooltip title=\"More options\">\r\n        <IconButton\r\n          onClick={handleMenuOpen}\r\n          ref={moreRef}\r\n        >\r\n          <SvgIcon fontSize=\"small\">\r\n            <MoreIcon />\r\n          </SvgIcon>\r\n        </IconButton>\r\n      </Tooltip>\r\n      <Menu\r\n        anchorEl={moreRef.current}\r\n        keepMounted\r\n        elevation={1}\r\n        onClose={handleMenuClose}\r\n        open={openMenu}\r\n      >\r\n        <MenuItem>\r\n          <ListItemIcon>\r\n            <SvgIcon fontSize=\"small\">\r\n              <SlashIcon />\r\n            </SvgIcon>\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Block contact\" />\r\n        </MenuItem>\r\n        <MenuItem>\r\n          <ListItemIcon>\r\n            <SvgIcon fontSize=\"small\">\r\n              <TrashIcon />\r\n            </SvgIcon>\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Delete thread\" />\r\n        </MenuItem>\r\n        <MenuItem>\r\n          <ListItemIcon>\r\n            <SvgIcon fontSize=\"small\">\r\n              <ArchiveIcon />\r\n            </SvgIcon>\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Archive thread\" />\r\n        </MenuItem>\r\n        <MenuItem>\r\n          <ListItemIcon>\r\n            <SvgIcon fontSize=\"small\">\r\n              <BellOffIcon />\r\n            </SvgIcon>\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Mute notifications\" />\r\n        </MenuItem>\r\n      </Menu>\r\n    </div>\r\n  );\r\n};\r\n\r\nDetailHeader.propTypes = {\r\n  className: PropTypes.string,\r\n  participants: PropTypes.array\r\n};\r\n\r\nDetailHeader.defaultProps = {\r\n  participants: []\r\n};\r\n\r\nexport default DetailHeader;\r\n","import React, { useState } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport moment from 'moment';\r\nimport { Lightbox } from 'react-modal-image';\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Link,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport useAuth from 'src/hooks/useAuth';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    marginBottom: theme.spacing(2),\r\n    display: 'flex'\r\n  },\r\n  avatar: {\r\n    height: 32,\r\n    width: 32\r\n  },\r\n  image: {\r\n    cursor: 'pointer',\r\n    height: 'auto',\r\n    maxWidth: '100%',\r\n    width: 380\r\n  }\r\n}));\r\n\r\nconst MessageItem = ({\r\n  className,\r\n  message,\r\n  thread,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  const { user } = useAuth();\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n\r\n  // Since chat mock db is not synced with external auth providers\r\n  // we set the user details from user auth state instead of thread participants\r\n  const sender = thread.participants.find((_participant) => _participant.id === message.senderId);\r\n  const senderDetails = message.senderId === '5e86809283e28b96d2d38537'\r\n    ? {\r\n      avatar: user.avatar,\r\n      name: 'Me',\r\n      type: 'user'\r\n    } : {\r\n      avatar: sender.avatar,\r\n      name: sender.name,\r\n      type: 'contact'\r\n    };\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Box\r\n        display=\"flex\"\r\n        maxWidth={500}\r\n        ml={senderDetails.type === 'user' ? 'auto' : 0}\r\n      >\r\n        <Avatar\r\n          className={classes.avatar}\r\n          src={senderDetails.avatar}\r\n        />\r\n        <Box ml={2}>\r\n          <Box\r\n            bgcolor={senderDetails.type === 'user' ? 'secondary.main' : 'background.default'}\r\n            borderRadius=\"borderRadius\"\r\n            boxShadow={1}\r\n            color={senderDetails.type === 'user' ? 'secondary.contrastText' : 'text.primary'}\r\n            px={2}\r\n            py={1}\r\n          >\r\n            <Link\r\n              color=\"inherit\"\r\n              component={RouterLink}\r\n              to=\"#\"\r\n              variant=\"h6\"\r\n            >\r\n              {senderDetails.name}\r\n            </Link>\r\n            <Box mt={1}>\r\n              {message.contentType === 'image' ? (\r\n                <Box\r\n                  mt={2}\r\n                  onClick={() => setSelectedImage(message.body)}\r\n                >\r\n                  <img\r\n                    alt=\"Attachment\"\r\n                    className={classes.image}\r\n                    src={message.body}\r\n                  />\r\n                </Box>\r\n              ) : (\r\n                  <Typography\r\n                    color=\"inherit\"\r\n                    variant=\"body1\"\r\n                  >\r\n                    {message.body}\r\n                  </Typography>\r\n                )}\r\n            </Box>\r\n          </Box>\r\n          <Box\r\n            mt={1}\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n          >\r\n            <Typography\r\n              noWrap\r\n              color=\"textSecondary\"\r\n              variant=\"caption\"\r\n            >\r\n              {moment(message.createdAt).fromNow()}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n      {selectedImage && (\r\n        <Lightbox\r\n          large={selectedImage}\r\n          onClose={() => setSelectedImage(null)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nMessageItem.propTypes = {\r\n  className: PropTypes.string,\r\n  message: PropTypes.object.isRequired,\r\n  thread: PropTypes.object.isRequired\r\n};\r\n\r\nexport default MessageItem;\r\n","import React, {\r\n  useEffect,\r\n  useRef\r\n} from 'react';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport MessageItem from './MessageItem';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nconst MessageList = ({\r\n  className,\r\n  thread,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  const scrollRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const scrollMessagesToBottom = () => {\r\n      if (scrollRef.current) {\r\n        scrollRef.current._container.scrollTop = scrollRef.current._container.scrollHeight;\r\n      }\r\n    };\r\n\r\n    scrollMessagesToBottom();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [thread.messages]);\r\n\r\n  return (\r\n    <PerfectScrollbar\r\n      className={clsx(classes.root, className)}\r\n      options={{ suppressScrollX: true }}\r\n      ref={scrollRef}\r\n      {...rest}\r\n    >\r\n      {thread.messages.map((message) => (\r\n        <MessageItem\r\n          key={message.id}\r\n          message={message}\r\n          thread={thread}\r\n        />\r\n      ))}\r\n    </PerfectScrollbar>\r\n  );\r\n};\r\n\r\nMessageItem.propTypes = {\r\n  className: PropTypes.string,\r\n  thread: PropTypes.object.isRequired\r\n};\r\n\r\nexport default MessageList;\r\n","import React, {\r\n  useRef,\r\n  useState\r\n} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n  Avatar,\r\n  Divider,\r\n  IconButton,\r\n  Input,\r\n  Paper,\r\n  SvgIcon,\r\n  Tooltip,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport AddPhotoIcon from '@material-ui/icons/AddPhotoAlternate';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport { Send as SendIcon } from 'react-feather';\r\nimport useAuth from 'src/hooks/useAuth';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    alignItems: 'center',\r\n    backgroundColor: theme.palette.background.default,\r\n    display: 'flex',\r\n    padding: theme.spacing(1, 2)\r\n  },\r\n  inputContainer: {\r\n    flexGrow: 1,\r\n    marginLeft: theme.spacing(2),\r\n    padding: theme.spacing(1)\r\n  },\r\n  divider: {\r\n    height: 24,\r\n    width: 1\r\n  },\r\n  fileInput: {\r\n    display: 'none'\r\n  }\r\n}));\r\n\r\nconst MessageComposer = ({\r\n  className,\r\n  disabled,\r\n  onSend,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  const { user } = useAuth();\r\n  const fileInputRef = useRef(null);\r\n  const [body, setBody] = useState('');\r\n\r\n  const handleAttach = () => {\r\n    fileInputRef.current.click();\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    event.persist();\r\n    setBody(event.target.value);\r\n  };\r\n\r\n  const handleKeyUp = (event) => {\r\n    if (event.keyCode === 13) {\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  const handleSend = () => {\r\n    if (!body) {\r\n      return;\r\n    }\r\n\r\n    if (onSend) {\r\n      onSend(body);\r\n    }\r\n\r\n    setBody('');\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Avatar\r\n        alt=\"Person\"\r\n        src={user.avatar}\r\n      />\r\n      <Paper\r\n        variant=\"outlined\"\r\n        className={classes.inputContainer}\r\n      >\r\n        <Input\r\n          disableUnderline\r\n          fullWidth\r\n          value={body}\r\n          onChange={handleChange}\r\n          onKeyUp={handleKeyUp}\r\n          placeholder=\"Leave a message\"\r\n          disabled={disabled}\r\n        />\r\n      </Paper>\r\n      <Tooltip title=\"Send\">\r\n        <span>\r\n          <IconButton\r\n            color=\"secondary\"\r\n            disabled={!body || disabled}\r\n            onClick={handleSend}\r\n          >\r\n            <SvgIcon fontSize=\"small\">\r\n              <SendIcon />\r\n            </SvgIcon>\r\n          </IconButton>\r\n        </span>\r\n      </Tooltip>\r\n      <Divider className={classes.divider} />\r\n      <Tooltip title=\"Attach photo\">\r\n        <span>\r\n          <IconButton\r\n            edge=\"end\"\r\n            onClick={handleAttach}\r\n            disabled={disabled}\r\n          >\r\n            <AddPhotoIcon />\r\n          </IconButton>\r\n        </span>\r\n      </Tooltip>\r\n      <Tooltip title=\"Attach file\">\r\n        <span>\r\n          <IconButton\r\n            edge=\"end\"\r\n            onClick={handleAttach}\r\n            disabled={disabled}\r\n          >\r\n            <AttachFileIcon />\r\n          </IconButton>\r\n        </span>\r\n      </Tooltip>\r\n      <input\r\n        className={classes.fileInput}\r\n        ref={fileInputRef}\r\n        type=\"file\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nMessageComposer.propTypes = {\r\n  className: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n  onSend: PropTypes.func\r\n};\r\n\r\nMessageComposer.defaultProps = {\r\n  disabled: false,\r\n  onSend: () => {}\r\n};\r\n\r\nexport default MessageComposer;\r\n","import React, { useEffect } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Divider,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'src/store';\r\nimport {\r\n  getThread,\r\n  markThreadAsSeen,\r\n  resetActiveThread,\r\n  getParticipants,\r\n  addRecipient,\r\n  removeRecipient\r\n} from 'src/slices/chat';\r\nimport ComposeHeader from './ComposeHeader';\r\nimport DetailHeader from './DetailHeader';\r\nimport MessageList from './MessageList';\r\nimport MessageComposer from './MessageComposer';\r\n\r\nconst threadSelector = (state) => {\r\n  const { threads, activeThreadId } = state.chat;\r\n  const thread = threads.byId[activeThreadId];\r\n\r\n  if (thread) {\r\n    return thread;\r\n  }\r\n\r\n  return {\r\n    id: null,\r\n    messages: [],\r\n    participants: [],\r\n    unreadMessages: 0\r\n  };\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    flexGrow: 1\r\n  }\r\n}));\r\n\r\nconst Thread = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const { threadKey } = useParams();\r\n  const { activeThreadId, participants, recipients } = useSelector((state) => state.chat);\r\n  const thread = useSelector((state) => threadSelector(state));\r\n\r\n  // In our case there two possible routes\r\n  // one that contains chat/new and one with a chat/:threadKey\r\n  // if threadKey does not exist, it means that the chat is in compose mode\r\n  const mode = threadKey ? 'DETAIL' : 'COMPOSE';\r\n\r\n  const handleAddRecipient = (recipient) => {\r\n    dispatch(addRecipient(recipient));\r\n  };\r\n\r\n  const handleRemoveRecipient = (recipientId) => {\r\n    dispatch(removeRecipient(recipientId));\r\n  };\r\n\r\n  const handleSendMessage = async (value) => {\r\n    try {\r\n      // Handle send message\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getDetails = async () => {\r\n      dispatch(getParticipants(threadKey));\r\n\r\n      try {\r\n        await dispatch(getThread(threadKey));\r\n      } catch (err) {\r\n        // If thread key is not a valid key (thread id or username)\r\n        // the server throws an error, this means that the user tried a shady route\r\n        // and we redirect him on the compose route\r\n        console.error(err);\r\n        history.push('/app/chat/new');\r\n      }\r\n    };\r\n\r\n    // If path contains a thread key we do the following:\r\n    // 1) Load the thread participants based on the key\r\n    // 2) Try to find a related thread based on the key, it might not exist if it is a new tread\r\n    if (threadKey) {\r\n      getDetails();\r\n    } else {\r\n      // If no thread key specifid, but an active thread id exists in the\r\n      // store, reset that key. This means that the user navigated from details mode to compose\r\n      if (activeThreadId) {\r\n        dispatch(resetActiveThread())\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [threadKey]);\r\n\r\n  useEffect(() => {\r\n    if (activeThreadId) {\r\n      // Maybe we should also check if active thread\r\n      // has unread messages before triggering this\r\n      dispatch(markThreadAsSeen(activeThreadId));\r\n    }\r\n  }, [dispatch, activeThreadId]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {mode === 'DETAIL' && (\r\n        <DetailHeader participants={participants} />\r\n      )}\r\n      {mode === 'COMPOSE' && (\r\n        <ComposeHeader\r\n          onAddRecipient={handleAddRecipient}\r\n          onRemoveRecipient={handleRemoveRecipient}\r\n          recipients={recipients}\r\n        />\r\n      )}\r\n      <Box\r\n        flexGrow={1}\r\n        overflow=\"hidden\"\r\n      >\r\n        <MessageList thread={thread} />\r\n      </Box>\r\n      <Divider />\r\n      <MessageComposer\r\n        disabled\r\n        onSend={handleSendMessage}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Thread;\r\n","import React, {\r\n  useEffect,\r\n  useRef\r\n} from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { useDispatch } from 'src/store';\r\nimport Page from 'src/components/Page';\r\nimport { getThreads } from 'src/slices/chat';\r\nimport Settings from './Settings';\r\nimport RecentThreads from './RecentThreads';\r\nimport Thread from './Thread';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    display: 'flex',\r\n    height: '100%',\r\n    overflow: 'hidden',\r\n    position: 'relative'\r\n  },\r\n  sidebar: {\r\n    backgroundColor: theme.palette.background.default,\r\n    borderRight: `1px solid ${theme.palette.divider}`,\r\n    width: 300\r\n  }\r\n}));\r\n\r\nconst ChatView = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const pageRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    dispatch(getThreads());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      title=\"Chat\"\r\n      ref={pageRef}\r\n    >\r\n      <div className={classes.sidebar}>\r\n        <Settings />\r\n        <RecentThreads />\r\n      </div>\r\n      <Thread />\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default ChatView;\r\n"],"sourceRoot":""}