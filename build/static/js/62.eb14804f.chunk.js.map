{"version":3,"sources":["views/chat/ChatView/Settings.js","views/chat/ChatView/RecentThreads/Search.js","views/chat/ChatView/RecentThreads/ThreadItem.js","views/chat/ChatView/RecentThreads/ThreadList.js","views/chat/ChatView/RecentThreads/index.js","views/chat/ChatView/Thread/ComposeHeader.js","views/chat/ChatView/Thread/DetailHeader.js","views/chat/ChatView/Thread/MessageItem.js","views/chat/ChatView/Thread/MessageList.js","views/chat/ChatView/Thread/MessageComposer.js","views/chat/ChatView/Thread/index.js","views/chat/ChatView/index.js"],"names":["useStyles","makeStyles","theme","root","display","alignItems","height","paddingLeft","spacing","paddingRight","Settings","className","rest","classes","clsx","Typography","variant","color","Box","flexGrow","IconButton","SvgIcon","fontSize","component","RouterLink","to","search","borderRadius","backgroundColor","palette","background","dark","searchInput","marginLeft","avatar","width","Search","forwardRef","ref","isFocused","onChange","onClickAway","onFocus","onSelect","query","results","displayResults","ClickAwayListener","Input","disableUnderline","placeholder","value","mt","List","map","result","ListItem","button","key","id","onClick","handleSelect","ListItemAvatar","Avatar","src","ListItemText","primary","name","primaryTypographyProps","noWrap","defaultProps","active","action","selected","boxShadow","secondary","main","smallAvatar","marginTop","unreadIndicator","minWidth","padding","ThreadItem","thread","details","currentUserId","otherParticipants","participants","filter","participant","displayNames","reduce","names","join","displayText","lastMessage","messages","length","sender","senderId","message","contentType","body","getDetails","AvatarGroup","max","alt","secondaryTypographyProps","ml","flexDirection","unreadCount","Chip","size","label","ThreadList","useSelector","state","chat","threads","activeThreadId","history","useHistory","allIds","threadId","byId","threadKey","type","find","username","push","hideThreadList","RecentThreads","useState","isSearchFocused","setSearchFocused","searchQuery","setSearchQuery","searchResults","setSearchResults","handleSearchChange","event","a","persist","target","axios","get","params","response","data","console","error","options","suppressScrollX","container","recipient","marginRight","input","default","compactInput","maxWidth","ComposeHeader","onAddRecipient","onRemoveRecipient","recipients","containerRef","useRef","setQuery","filteredSearchResults","recipientIds","acc","includes","getFilteredSearchResults","onDelete","recipientId","onBlur","Popper","anchorEl","current","open","placement","Paper","pb","pt","px","textAlign","gutterBottom","contact","borderBottom","divider","flexShrink","minHeight","paddingBottom","paddingTop","DetailHeader","moreRef","openMenu","setOpenMenu","Tooltip","title","Menu","keepMounted","elevation","onClose","MenuItem","ListItemIcon","marginBottom","image","cursor","MessageItem","user","useAuth","selectedImage","setSelectedImage","_participant","senderDetails","bgcolor","py","Link","justifyContent","moment","createdAt","fromNow","large","propTypes","PropTypes","string","object","isRequired","MessageList","scrollRef","useEffect","_container","scrollTop","scrollHeight","inputContainer","fileInput","MessageComposer","disabled","onSend","fileInputRef","setBody","handleAttach","click","handleSend","fullWidth","onKeyUp","keyCode","Divider","edge","Thread","dispatch","useDispatch","useParams","unreadMessages","threadSelector","mode","handleSendMessage","getParticipants","getThread","resetActiveThread","markThreadAsSeen","addRecipient","removeRecipient","overflow","position","sidebar","borderRight","ChatView","pageRef","getThreads","Page"],"mappings":"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","file":"static/js/62.eb14804f.chunk.js","sourcesContent":["import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {\n  Box,\n  IconButton,\n  SvgIcon,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport {\n  Settings as SettingsIcon,\n  Edit as EditIcon\n} from 'react-feather';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    height: 64,\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2)\n  }\n}));\n\nconst Settings = ({ className, ...rest }) => {\n  const classes = useStyles();\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Typography\n        variant=\"h3\"\n        color=\"textPrimary\"\n      >\n        Chats\n      </Typography>\n      <Box flexGrow={1} />\n      <IconButton>\n        <SvgIcon fontSize=\"small\">\n          <SettingsIcon />\n        </SvgIcon>\n      </IconButton>\n      <IconButton\n        component={RouterLink}\n        to=\"/app/chat/new\"\n      >\n        <SvgIcon fontSize=\"small\">\n          <EditIcon />\n        </SvgIcon>\n      </IconButton>\n    </div>\n  );\n};\n\nSettings.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Settings;\n","import React, { forwardRef } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {\n  Avatar,\n  Box,\n  ClickAwayListener,\n  Input,\n  SvgIcon,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport { Search as SearchIcon } from 'react-feather';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1)\n  },\n  search: {\n    display: 'flex',\n    alignItems: 'center',\n    height: 44,\n    borderRadius: 22,\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    backgroundColor: theme.palette.background.dark\n  },\n  searchInput: {\n    flexGrow: 1,\n    marginLeft: theme.spacing(1)\n  },\n  avatar: {\n    height: 32,\n    width: 32\n  }\n}));\n\nconst Search = forwardRef(({\n  className,\n  isFocused,\n  onChange,\n  onClickAway,\n  onFocus,\n  onSelect,\n  query,\n  results,\n  ...rest\n}, ref) => {\n  const classes = useStyles();\n\n  const displayResults = query && isFocused;\n\n  const handleSelect = (result) => {\n    if (onSelect) {\n      onSelect(result);\n    }\n  };\n\n  return (\n    <ClickAwayListener onClickAway={onClickAway}>\n      <div\n        className={clsx(classes.root, className)}\n        ref={ref}\n        {...rest}\n      >\n        <div className={classes.search}>\n          <SvgIcon\n            fontSize=\"small\"\n            color=\"action\"\n          >\n            <SearchIcon />\n          </SvgIcon>\n          <Input\n            className={classes.searchInput}\n            disableUnderline\n            onChange={onChange}\n            onFocus={onFocus}\n            placeholder=\"Search contacts\"\n            value={query}\n          />\n        </div>\n        {displayResults && (\n          <Box mt={2}>\n            <Typography\n              variant=\"h6\"\n              color=\"textSecondary\"\n            >\n              Contacts\n            </Typography>\n            <List>\n              {results.map((result) => {\n                return (\n                  <ListItem\n                    button\n                    key={result.id}\n                    onClick={() => handleSelect(result)}\n                  >\n                    <ListItemAvatar>\n                      <Avatar\n                        src={result.avatar}\n                        className={classes.avatar}\n                      />\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={result.name}\n                      primaryTypographyProps={{\n                        noWrap: true,\n                        variant: 'h6',\n                        color: 'textPrimary'\n                      }}\n                    />\n                  </ListItem>\n                );\n              })}\n            </List>\n          </Box>\n        )}\n      </div>\n    </ClickAwayListener>\n  );\n});\n\nSearch.propTypes = {\n  className: PropTypes.string,\n  onChange: PropTypes.func,\n  onClickAway: PropTypes.func,\n  onFocus: PropTypes.func,\n  onSelect: PropTypes.func,\n  query: PropTypes.string,\n  results: PropTypes.array\n};\n\nSearch.defaultProps = {\n  isFocused: false,\n  query: '',\n  results: []\n};\n\nexport default Search;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Avatar,\n  Box,\n  Chip,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  makeStyles\n} from '@material-ui/core';\nimport { AvatarGroup } from '@material-ui/lab';\n\nconst getDetails = (thread, currentUserId) => {\n  const otherParticipants = thread.participants.filter((participant) => participant.id !== currentUserId);\n  const displayNames = otherParticipants.reduce((names, participant) => [...names, participant.name], []).join(', ');\n  let displayText = ''\n  const lastMessage = thread.messages[thread.messages.length - 1];\n\n  if (lastMessage) {\n    const sender = lastMessage.senderId === currentUserId ? 'Me: ' : '';\n    const message = lastMessage.contentType === 'image' ? 'Sent a photo' : lastMessage.body;\n    \n    displayText = `${sender}${message}`\n  }\n\n  return {\n    otherParticipants,\n    displayNames,\n    displayText\n  };\n};\n\nconst useStyles = makeStyles((theme) => ({\n  active: {\n    backgroundColor: theme.palette.action.selected,\n    boxShadow: `inset 4px 0px 0px ${theme.palette.secondary.main}`\n  },\n  smallAvatar: {\n    height: 30,\n    width: 30,\n    '&:first-child': {\n      marginTop: 10\n    }\n  },\n  unreadIndicator: {\n    height: 18,\n    marginTop: 2,\n    minWidth: 18,\n    padding: 2\n  }\n}));\n\nconst ThreadItem = ({\n  active,\n  className,\n  thread,\n  onSelect,\n  ...rest\n}) => {\n  const classes = useStyles();\n\n  // We hardcode the current user ID because the mocked that is not in sync with the auth provider.\n  // When implementing this app with a real database, replace this ID with the ID from Auth Context.\n  const details = getDetails(thread, '5e86809283e28b96d2d38537');\n\n  return (\n    <ListItem\n      button\n      className={clsx(\n        { [classes.active]: active },\n        className\n      )}\n      onClick={onSelect}\n      {...rest}\n    >\n      <ListItemAvatar>\n        <AvatarGroup\n          classes={{ avatar: details.otherParticipants.length > 1 ? classes.smallAvatar : null }}\n          max={2}\n        >\n          {details.otherParticipants.map((participant) => (\n            <Avatar\n              alt=\"Person\"\n              key={participant.id}\n              src={participant.avatar}\n            />\n          ))}\n        </AvatarGroup>\n      </ListItemAvatar>\n      <ListItemText\n        primary={details.displayNames}\n        primaryTypographyProps={{\n          noWrap: true,\n          variant: 'h6',\n          color: 'textPrimary'\n        }}\n        secondary={details.displayText}\n        secondaryTypographyProps={{\n          noWrap: true,\n          variant: 'body2',\n          color: 'textSecondary'\n        }}\n      />\n      <Box\n        ml={2}\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"flex-end\"\n      >\n        {thread.unreadCount > 0 && (\n          <Chip\n            className={classes.unreadIndicator}\n            color=\"secondary\"\n            size=\"small\"\n            label={thread.unreadCount}\n          />\n        )}\n      </Box>\n    </ListItem>\n  );\n};\n\nThreadItem.propTypes = {\n  active: PropTypes.bool,\n  className: PropTypes.string,\n  onSelect: PropTypes.func,\n  thread: PropTypes.object.isRequired\n};\n\nThreadItem.defaultProps = {\n  active: false,\n  onSelect: () => { }\n};\n\nexport default ThreadItem;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { List, makeStyles } from '@material-ui/core';\nimport { useSelector } from 'src/store';\nimport ThreadItem from './ThreadItem';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst ThreadList = ({ className, ...rest }) => {\n  const classes = useStyles();\n  const { threads, activeThreadId } = useSelector((state) => state.chat);\n  const history = useHistory();\n\n  const handleSelect = (threadId) => {\n    const thread = threads.byId[threadId];\n    let threadKey = '';\n\n    if (thread.type === 'GROUP') {\n      threadKey = thread.id;\n    } else {\n      // We hardcode the current user ID because the mocked that is not in sync with the auth provider.\n      // When implementing this app with a real database, replace this ID with the ID from Auth Context.\n      const otherParticipant = thread.participants.find((participant) => participant.id !== '5e86809283e28b96d2d38537');\n\n      threadKey = otherParticipant.username;\n    }\n\n    history.push(`/app/chat/${threadKey}`);\n  };\n\n  return (\n    <List\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      {threads.allIds.map((threadId) => (\n        <ThreadItem\n          active={activeThreadId === threadId}\n          key={threadId}\n          onSelect={() => handleSelect(threadId)}\n          thread={threads.byId[threadId]}\n        />\n      ))}\n    </List>\n  );\n};\n\nThreadList.propTypes = {\n  className: PropTypes.string\n};\n\nexport default ThreadList;\n","import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { useHistory } from 'react-router-dom';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { makeStyles } from '@material-ui/core';\nimport axios from 'src/utils/axios';\nimport Search from './Search';\nimport ThreadList from './ThreadList';\n\nconst useStyles = makeStyles(() => ({\n  hideThreadList: {\n    display: 'none'\n  }\n}));\n\nconst RecentThreads = () => {\n  const classes = useStyles();\n  const history = useHistory();\n  const [isSearchFocused, setSearchFocused] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n\n  const handleSearchClickAway = () => {\n    setSearchFocused(false);\n    setSearchQuery('');\n  };\n\n  const handleSearchChange = async (event) => {\n    try {\n      event.persist();\n\n      const { value } = event.target;\n\n      setSearchQuery(value);\n\n      if (value) {\n        const response = await axios.get('/api/chat/search', {\n          params: {\n            query: value\n          }\n        });\n\n        setSearchResults(response.data.results);\n      } else {\n        setSearchResults([]);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleSearchFocus = (event) => {\n    event.persist();\n    setSearchFocused(true);\n  };\n\n  const handleSearchSelect = (result) => {\n    setSearchFocused(false);\n    setSearchQuery('');\n    history.push(`/app/chat/${result.username}`);\n  };\n\n  return (\n    <PerfectScrollbar options={{ suppressScrollX: true }}>\n      <Search\n        isFocused={isSearchFocused}\n        onChange={handleSearchChange}\n        onClickAway={handleSearchClickAway}\n        onFocus={handleSearchFocus}\n        onSelect={handleSearchSelect}\n        query={searchQuery}\n        results={searchResults}\n      />\n      <ThreadList className={clsx({ [classes.hideThreadList]: isSearchFocused })} />\n    </PerfectScrollbar>\n  );\n};\n\nexport default RecentThreads;\n","import React, {\n  useState,\n  useRef\n} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Avatar,\n  Box,\n  Chip,\n  ClickAwayListener,\n  Input,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Paper,\n  Popper,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport axios from 'src/utils/axios';\n\nconst getFilteredSearchResults = (results, recipients) => {\n  const recipientIds = recipients.reduce((acc, recipient) => {\n    return [...acc, recipient.id];\n  }, []);\n\n  return results.filter((result) => !recipientIds.includes(result.id));\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    alignItems: 'center',\n    display: 'flex',\n    padding: theme.spacing(2)\n  },\n  container: {\n    marginLeft: theme.spacing(1)\n  },\n  recipient: {\n    marginLeft: 4,\n    marginRight: 4\n  },\n  input: {\n    backgroundColor: theme.palette.background.default,\n    borderRadius: 16,\n    height: 32,\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2)\n  },\n  compactInput: {\n    maxWidth: 120\n  },\n  searchResults: {\n    marginTop: theme.spacing(1),\n    maxWidth: '100%',\n    width: 320\n  }\n}));\n\nconst ComposeHeader = ({\n  className,\n  onAddRecipient,\n  onRemoveRecipient,\n  recipients,\n  ...rest\n}) => {\n  const classes = useStyles();\n  const containerRef = useRef(null);\n  const [query, setQuery] = useState('');\n  const [isSearchFocused, setSearchFocused] = useState(true);\n  const [searchResults, setSearchResults] = useState([]);\n\n  const filteredSearchResults = getFilteredSearchResults(searchResults, recipients);\n  const displayResults = query && isSearchFocused;\n\n  const handleSearchChange = async (event) => {\n    try {\n      event.persist();\n\n      const { value } = event.target;\n  \n      setQuery(value);\n\n      if (value) {\n        const response = await axios.get('/api/chat/search', {\n          params: {\n            query: value\n          }\n        });\n    \n        setSearchResults(response.data.results);\n      } else {\n        setSearchResults([]);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleSearchBlur = (event) => {\n    event.persist();\n\n    if (!displayResults) {\n      setSearchFocused(false);\n    }\n  };\n\n  const handleSearchFocus = (event) => {\n    event.persist();\n    setSearchFocused(true);\n  };\n\n  const handleSearchResultsClickAway = () => {\n    setSearchFocused(false);\n  };\n\n  const handleAddRecipient = (contact) => {\n    setQuery('');\n\n    if (onAddRecipient) {\n      onAddRecipient(contact);\n    }\n  };\n\n  const handleRemoveRecipient = (recipientId) => {\n    if (onRemoveRecipient) {\n      onRemoveRecipient(recipientId);\n    }\n  };\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Typography\n        variant=\"body1\"\n        color=\"textSecondary\"\n      >\n        To:\n      </Typography>\n      <div\n        className={classes.container}\n        ref={containerRef}\n      >\n        {recipients.map((recipient) => (\n          <Chip\n            className={classes.recipient}\n            color=\"primary\"\n            key={recipient.id}\n            label={recipient.name}\n            onDelete={() => handleRemoveRecipient(recipient.id)}\n            size=\"small\"\n          />\n        ))}\n        <Input\n          className={clsx(classes.input, { [classes.compactInput]: recipients.length > 0 })}\n          disableUnderline\n          onBlur={handleSearchBlur}\n          onChange={handleSearchChange}\n          onFocus={handleSearchFocus}\n          placeholder={recipients.length === 0 ? 'Search contacts' : ''}\n          value={query}\n        />\n      </div>\n      {displayResults && (\n        <ClickAwayListener onClickAway={handleSearchResultsClickAway}>\n          <Popper\n            anchorEl={containerRef.current}\n            open={isSearchFocused}\n            placement=\"bottom-start\"\n          >\n            <Paper className={classes.searchResults}>\n              {filteredSearchResults.length === 0 ? (\n                <Box\n                  pb={2}\n                  pt={2}\n                  px={2}\n                  textAlign=\"center\"\n                >\n                  <Typography\n                    color=\"textPrimary\"\n                    gutterBottom\n                    variant=\"h4\"\n                  >\n                    Nothing Found\n                  </Typography>\n                  <Typography\n                    color=\"textSecondary\"\n                    variant=\"body2\"\n                  >\n                    We couldn&apos;t find any matches for &quot;\n                    {query}\n                    &quot;. Try checking for typos or using complete words.\n                  </Typography>\n                </Box>\n              ) : (\n                <>\n                  <Box\n                    px={2}\n                    pt={2}\n                  >\n                    <Typography\n                      color=\"textSecondary\"\n                      variant=\"h6\"\n                    >\n                      Contacts\n                    </Typography>\n                  </Box>\n                  <List>\n                    {filteredSearchResults.map((result) => (\n                      <ListItem\n                        button\n                        key={result.id}\n                        onClick={() => handleAddRecipient(result)}\n                      >\n                        <ListItemAvatar>\n                          <Avatar src={result.avatar} />\n                        </ListItemAvatar>\n                        <ListItemText\n                          primary={result.name}\n                          primaryTypographyProps={{\n                            color: 'textPrimary',\n                            noWrap: true,\n                            variant: 'h6'\n                          }}\n                        />\n                      </ListItem>\n                    ))}\n                  </List>\n                </>\n              )}\n            </Paper>\n          </Popper>\n        </ClickAwayListener>\n      )}\n    </div>\n  );\n};\n\nComposeHeader.propTypes = {\n  className: PropTypes.string,\n  onAddRecipient: PropTypes.func,\n  onRemoveRecipient: PropTypes.func,\n  recipients: PropTypes.array\n};\n\nComposeHeader.defaultProps = {\n  onAddRecipient: () => { },\n  onRemoveRecipient: () => { },\n  recipients: []\n};\n\nexport default ComposeHeader;\n","import React, {\n  useState,\n  useRef\n} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  ListItemIcon,\n  ListItemText,\n  SvgIcon,\n  IconButton,\n  Menu,\n  MenuItem,\n  Tooltip,\n  Avatar,\n  Box,\n  makeStyles,\n  Typography\n} from '@material-ui/core';\nimport { AvatarGroup } from '@material-ui/lab';\nimport {\n  Archive as ArchiveIcon,\n  BellOff as BellOffIcon,\n  Camera as CameraIcon,\n  MoreVertical as MoreIcon,\n  Phone as PhoneIcon,\n  Slash as SlashIcon,\n  Trash as TrashIcon\n} from 'react-feather';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    alignItems: 'center',\n    backgroundColor: theme.palette.background.default,\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    display: 'flex',\n    flexShrink: 0,\n    minHeight: 64,\n    paddingBottom: theme.spacing(1),\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    paddingTop: theme.spacing(1)\n  },\n  smallAvatar: {\n    height: 30,\n    width: 30,\n    '&:first-child': {\n      marginTop: 10\n    }\n  }\n}));\n\nconst DetailHeader = ({\n  className,\n  participants,\n  ...rest\n}) => {\n  const classes = useStyles();\n  const moreRef = useRef(null);\n  const [openMenu, setOpenMenu] = useState(false);\n\n  // We hardcode the current user ID because the mocked that is not in sync with the auth provider.\n  // When implementing this app with a real database, replace this ID with the ID from Auth Context.\n  const otherParticipants = participants.filter((participant) => participant.id !== '5e86809283e28b96d2d38537');\n  const displayNames = otherParticipants.reduce((names, participant) => [...names, participant.name], []).join(', ');\n\n  const handleMenuOpen = () => {\n    setOpenMenu(true);\n  };\n\n  const handleMenuClose = () => {\n    setOpenMenu(false);\n  };\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Box\n        alignItems=\"center\"\n        display=\"flex\"\n      >\n        <AvatarGroup\n          classes={{ avatar: otherParticipants.length > 1 ? classes.smallAvatar : null}}\n          max={2}\n        >\n          {otherParticipants.map((participant) => (\n            <Avatar\n              alt=\"Person\"\n              key={participant.id}\n              src={participant.avatar}\n            />\n          ))}\n        </AvatarGroup>\n        <Typography\n          color=\"textPrimary\"\n          variant=\"h5\"\n        >\n          {displayNames}\n        </Typography>\n      </Box>\n      <Box flexGrow={1} />\n      <IconButton>\n        <SvgIcon fontSize=\"small\">\n          <PhoneIcon />\n        </SvgIcon>\n      </IconButton>\n      <IconButton>\n        <SvgIcon fontSize=\"small\">\n          <CameraIcon />\n        </SvgIcon>\n      </IconButton>\n      <Tooltip title=\"More options\">\n        <IconButton\n          onClick={handleMenuOpen}\n          ref={moreRef}\n        >\n          <SvgIcon fontSize=\"small\">\n            <MoreIcon />\n          </SvgIcon>\n        </IconButton>\n      </Tooltip>\n      <Menu\n        anchorEl={moreRef.current}\n        keepMounted\n        elevation={1}\n        onClose={handleMenuClose}\n        open={openMenu}\n      >\n        <MenuItem>\n          <ListItemIcon>\n            <SvgIcon fontSize=\"small\">\n              <SlashIcon />\n            </SvgIcon>\n          </ListItemIcon>\n          <ListItemText primary=\"Block contact\" />\n        </MenuItem>\n        <MenuItem>\n          <ListItemIcon>\n            <SvgIcon fontSize=\"small\">\n              <TrashIcon />\n            </SvgIcon>\n          </ListItemIcon>\n          <ListItemText primary=\"Delete thread\" />\n        </MenuItem>\n        <MenuItem>\n          <ListItemIcon>\n            <SvgIcon fontSize=\"small\">\n              <ArchiveIcon />\n            </SvgIcon>\n          </ListItemIcon>\n          <ListItemText primary=\"Archive thread\" />\n        </MenuItem>\n        <MenuItem>\n          <ListItemIcon>\n            <SvgIcon fontSize=\"small\">\n              <BellOffIcon />\n            </SvgIcon>\n          </ListItemIcon>\n          <ListItemText primary=\"Mute notifications\" />\n        </MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nDetailHeader.propTypes = {\n  className: PropTypes.string,\n  participants: PropTypes.array\n};\n\nDetailHeader.defaultProps = {\n  participants: []\n};\n\nexport default DetailHeader;\n","import React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport { Lightbox } from 'react-modal-image';\nimport {\n  Avatar,\n  Box,\n  Link,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport useAuth from 'src/hooks/useAuth';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginBottom: theme.spacing(2),\n    display: 'flex'\n  },\n  avatar: {\n    height: 32,\n    width: 32\n  },\n  image: {\n    cursor: 'pointer',\n    height: 'auto',\n    maxWidth: '100%',\n    width: 380\n  }\n}));\n\nconst MessageItem = ({\n  className,\n  message,\n  thread,\n  ...rest\n}) => {\n  const classes = useStyles();\n  const { user } = useAuth();\n  const [selectedImage, setSelectedImage] = useState(null);\n\n  // Since chat mock db is not synced with external auth providers\n  // we set the user details from user auth state instead of thread participants\n  const sender = thread.participants.find((_participant) => _participant.id === message.senderId);\n  const senderDetails = message.senderId === '5e86809283e28b96d2d38537'\n    ? {\n      avatar: user.avatar,\n      name: 'Me',\n      type: 'user'\n    } : {\n      avatar: sender.avatar,\n      name: sender.name,\n      type: 'contact'\n    };\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Box\n        display=\"flex\"\n        maxWidth={500}\n        ml={senderDetails.type === 'user' ? 'auto' : 0}\n      >\n        <Avatar\n          className={classes.avatar}\n          src={senderDetails.avatar}\n        />\n        <Box ml={2}>\n          <Box\n            bgcolor={senderDetails.type === 'user' ? 'secondary.main' : 'background.default'}\n            borderRadius=\"borderRadius\"\n            boxShadow={1}\n            color={senderDetails.type === 'user' ? 'secondary.contrastText' : 'text.primary'}\n            px={2}\n            py={1}\n          >\n            <Link\n              color=\"inherit\"\n              component={RouterLink}\n              to=\"#\"\n              variant=\"h6\"\n            >\n              {senderDetails.name}\n            </Link>\n            <Box mt={1}>\n              {message.contentType === 'image' ? (\n                <Box\n                  mt={2}\n                  onClick={() => setSelectedImage(message.body)}\n                >\n                  <img\n                    alt=\"Attachment\"\n                    className={classes.image}\n                    src={message.body}\n                  />\n                </Box>\n              ) : (\n                  <Typography\n                    color=\"inherit\"\n                    variant=\"body1\"\n                  >\n                    {message.body}\n                  </Typography>\n                )}\n            </Box>\n          </Box>\n          <Box\n            mt={1}\n            display=\"flex\"\n            justifyContent=\"flex-end\"\n          >\n            <Typography\n              noWrap\n              color=\"textSecondary\"\n              variant=\"caption\"\n            >\n              {moment(message.createdAt).fromNow()}\n            </Typography>\n          </Box>\n        </Box>\n      </Box>\n      {selectedImage && (\n        <Lightbox\n          large={selectedImage}\n          onClose={() => setSelectedImage(null)}\n        />\n      )}\n    </div>\n  );\n};\n\nMessageItem.propTypes = {\n  className: PropTypes.string,\n  message: PropTypes.object.isRequired,\n  thread: PropTypes.object.isRequired\n};\n\nexport default MessageItem;\n","import React, {\n  useEffect,\n  useRef\n} from 'react';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core';\nimport MessageItem from './MessageItem';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2)\n  }\n}));\n\nconst MessageList = ({\n  className,\n  thread,\n  ...rest\n}) => {\n  const classes = useStyles();\n  const scrollRef = useRef(null);\n\n  useEffect(() => {\n    const scrollMessagesToBottom = () => {\n      if (scrollRef.current) {\n        scrollRef.current._container.scrollTop = scrollRef.current._container.scrollHeight;\n      }\n    };\n\n    scrollMessagesToBottom();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [thread.messages]);\n\n  return (\n    <PerfectScrollbar\n      className={clsx(classes.root, className)}\n      options={{ suppressScrollX: true }}\n      ref={scrollRef}\n      {...rest}\n    >\n      {thread.messages.map((message) => (\n        <MessageItem\n          key={message.id}\n          message={message}\n          thread={thread}\n        />\n      ))}\n    </PerfectScrollbar>\n  );\n};\n\nMessageItem.propTypes = {\n  className: PropTypes.string,\n  thread: PropTypes.object.isRequired\n};\n\nexport default MessageList;\n","import React, {\n  useRef,\n  useState\n} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Avatar,\n  Divider,\n  IconButton,\n  Input,\n  Paper,\n  SvgIcon,\n  Tooltip,\n  makeStyles\n} from '@material-ui/core';\nimport AddPhotoIcon from '@material-ui/icons/AddPhotoAlternate';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport { Send as SendIcon } from 'react-feather';\nimport useAuth from 'src/hooks/useAuth';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    alignItems: 'center',\n    backgroundColor: theme.palette.background.default,\n    display: 'flex',\n    padding: theme.spacing(1, 2)\n  },\n  inputContainer: {\n    flexGrow: 1,\n    marginLeft: theme.spacing(2),\n    padding: theme.spacing(1)\n  },\n  divider: {\n    height: 24,\n    width: 1\n  },\n  fileInput: {\n    display: 'none'\n  }\n}));\n\nconst MessageComposer = ({\n  className,\n  disabled,\n  onSend,\n  ...rest\n}) => {\n  const classes = useStyles();\n  const { user } = useAuth();\n  const fileInputRef = useRef(null);\n  const [body, setBody] = useState('');\n\n  const handleAttach = () => {\n    fileInputRef.current.click();\n  };\n\n  const handleChange = (event) => {\n    event.persist();\n    setBody(event.target.value);\n  };\n\n  const handleKeyUp = (event) => {\n    if (event.keyCode === 13) {\n      handleSend();\n    }\n  };\n\n  const handleSend = () => {\n    if (!body) {\n      return;\n    }\n\n    if (onSend) {\n      onSend(body);\n    }\n\n    setBody('');\n  };\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Avatar\n        alt=\"Person\"\n        src={user.avatar}\n      />\n      <Paper\n        variant=\"outlined\"\n        className={classes.inputContainer}\n      >\n        <Input\n          disableUnderline\n          fullWidth\n          value={body}\n          onChange={handleChange}\n          onKeyUp={handleKeyUp}\n          placeholder=\"Leave a message\"\n          disabled={disabled}\n        />\n      </Paper>\n      <Tooltip title=\"Send\">\n        <span>\n          <IconButton\n            color=\"secondary\"\n            disabled={!body || disabled}\n            onClick={handleSend}\n          >\n            <SvgIcon fontSize=\"small\">\n              <SendIcon />\n            </SvgIcon>\n          </IconButton>\n        </span>\n      </Tooltip>\n      <Divider className={classes.divider} />\n      <Tooltip title=\"Attach photo\">\n        <span>\n          <IconButton\n            edge=\"end\"\n            onClick={handleAttach}\n            disabled={disabled}\n          >\n            <AddPhotoIcon />\n          </IconButton>\n        </span>\n      </Tooltip>\n      <Tooltip title=\"Attach file\">\n        <span>\n          <IconButton\n            edge=\"end\"\n            onClick={handleAttach}\n            disabled={disabled}\n          >\n            <AttachFileIcon />\n          </IconButton>\n        </span>\n      </Tooltip>\n      <input\n        className={classes.fileInput}\n        ref={fileInputRef}\n        type=\"file\"\n      />\n    </div>\n  );\n};\n\nMessageComposer.propTypes = {\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  onSend: PropTypes.func\n};\n\nMessageComposer.defaultProps = {\n  disabled: false,\n  onSend: () => {}\n};\n\nexport default MessageComposer;\n","import React, { useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport {\n  Box,\n  Divider,\n  makeStyles\n} from '@material-ui/core';\nimport { useDispatch, useSelector } from 'src/store';\nimport {\n  getThread,\n  markThreadAsSeen,\n  resetActiveThread,\n  getParticipants,\n  addRecipient,\n  removeRecipient\n} from 'src/slices/chat';\nimport ComposeHeader from './ComposeHeader';\nimport DetailHeader from './DetailHeader';\nimport MessageList from './MessageList';\nimport MessageComposer from './MessageComposer';\n\nconst threadSelector = (state) => {\n  const { threads, activeThreadId } = state.chat;\n  const thread = threads.byId[activeThreadId];\n\n  if (thread) {\n    return thread;\n  }\n\n  return {\n    id: null,\n    messages: [],\n    participants: [],\n    unreadMessages: 0\n  };\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1\n  }\n}));\n\nconst Thread = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { threadKey } = useParams();\n  const { activeThreadId, participants, recipients } = useSelector((state) => state.chat);\n  const thread = useSelector((state) => threadSelector(state));\n\n  // In our case there two possible routes\n  // one that contains chat/new and one with a chat/:threadKey\n  // if threadKey does not exist, it means that the chat is in compose mode\n  const mode = threadKey ? 'DETAIL' : 'COMPOSE';\n\n  const handleAddRecipient = (recipient) => {\n    dispatch(addRecipient(recipient));\n  };\n\n  const handleRemoveRecipient = (recipientId) => {\n    dispatch(removeRecipient(recipientId));\n  };\n\n  const handleSendMessage = async (value) => {\n    try {\n      // Handle send message\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    const getDetails = async () => {\n      dispatch(getParticipants(threadKey));\n\n      try {\n        await dispatch(getThread(threadKey));\n      } catch (err) {\n        // If thread key is not a valid key (thread id or username)\n        // the server throws an error, this means that the user tried a shady route\n        // and we redirect him on the compose route\n        console.error(err);\n        history.push('/app/chat/new');\n      }\n    };\n\n    // If path contains a thread key we do the following:\n    // 1) Load the thread participants based on the key\n    // 2) Try to find a related thread based on the key, it might not exist if it is a new tread\n    if (threadKey) {\n      getDetails();\n    } else {\n      // If no thread key specifid, but an active thread id exists in the\n      // store, reset that key. This means that the user navigated from details mode to compose\n      if (activeThreadId) {\n        dispatch(resetActiveThread())\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [threadKey]);\n\n  useEffect(() => {\n    if (activeThreadId) {\n      // Maybe we should also check if active thread\n      // has unread messages before triggering this\n      dispatch(markThreadAsSeen(activeThreadId));\n    }\n  }, [dispatch, activeThreadId]);\n\n  return (\n    <div className={classes.root}>\n      {mode === 'DETAIL' && (\n        <DetailHeader participants={participants} />\n      )}\n      {mode === 'COMPOSE' && (\n        <ComposeHeader\n          onAddRecipient={handleAddRecipient}\n          onRemoveRecipient={handleRemoveRecipient}\n          recipients={recipients}\n        />\n      )}\n      <Box\n        flexGrow={1}\n        overflow=\"hidden\"\n      >\n        <MessageList thread={thread} />\n      </Box>\n      <Divider />\n      <MessageComposer\n        disabled\n        onSend={handleSendMessage}\n      />\n    </div>\n  );\n};\n\nexport default Thread;\n","import React, {\n  useEffect,\n  useRef\n} from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport { useDispatch } from 'src/store';\nimport Page from 'src/components/Page';\nimport { getThreads } from 'src/slices/chat';\nimport Settings from './Settings';\nimport RecentThreads from './RecentThreads';\nimport Thread from './Thread';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    display: 'flex',\n    height: '100%',\n    overflow: 'hidden',\n    position: 'relative'\n  },\n  sidebar: {\n    backgroundColor: theme.palette.background.default,\n    borderRight: `1px solid ${theme.palette.divider}`,\n    width: 300\n  }\n}));\n\nconst ChatView = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const pageRef = useRef(null);\n\n  useEffect(() => {\n    dispatch(getThreads());\n  }, [dispatch]);\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Chat\"\n      ref={pageRef}\n    >\n      <div className={classes.sidebar}>\n        <Settings />\n        <RecentThreads />\n      </div>\n      <Thread />\n    </Page>\n  );\n};\n\nexport default ChatView;\n"],"sourceRoot":""}