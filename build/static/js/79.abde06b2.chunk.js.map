{"version":3,"sources":["views/extra/forms/FormikView/BasicForm.js","views/extra/forms/FormikView/index.js"],"names":["BasicForm","useState","isAlertVisible","setAlertVisible","initialValues","email","firstName","lastName","password","policy","submit","validationSchema","Yup","shape","required","min","max","oneOf","onSubmit","values","a","resetForm","setErrors","setStatus","setSubmitting","wait","success","console","error","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","Card","CardHeader","title","Divider","CardContent","Box","mb","Alert","onClose","severity","display","justifyContent","my","CircularProgress","Grid","container","spacing","item","md","xs","TextField","Boolean","fullWidth","helperText","label","name","onBlur","onChange","value","variant","mt","type","alignItems","ml","Checkbox","checked","Typography","color","Link","component","href","FormHelperText","Button","disabled","size","useStyles","makeStyles","theme","root","backgroundColor","palette","background","dark","minHeight","paddingTop","paddingBottom","FormikView","classes","Page","className","Container","maxWidth","Breadcrumbs","separator","fontSize","aria-label","to","RouterLink"],"mappings":"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","file":"static/js/79.abde06b2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Checkbox,\n  CircularProgress,\n  Divider,\n  FormHelperText,\n  Grid,\n  Link,\n  TextField,\n  Typography\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport wait from 'src/utils/wait';\n\nconst BasicForm = () => {\n  const [isAlertVisible, setAlertVisible] = useState(true);\n\n  return (\n    <Formik\n      initialValues={{\n        email: 'johnnydoe@yahoo.com',\n        firstName: 'John',\n        lastName: 'Doe',\n        password: 'thisisasecuredpassword',\n        policy: false,\n        submit: null\n      }}\n      validationSchema={Yup.object().shape({\n        email: Yup.string().email().required('Required'),\n        firstName: Yup.string().required('Required'),\n        lastName: Yup.string().required('Required'),\n        password: Yup.string().min(7, 'Must be at least 7 characters').max(255).required('Required'),\n        policy: Yup.boolean().oneOf([true], 'This field must be checked')\n      })}\n      onSubmit={async (values, {\n        resetForm,\n        setErrors,\n        setStatus,\n        setSubmitting\n      }) => {\n        try {\n          // NOTE: Make API request\n          await wait(1000);\n          resetForm();\n          setStatus({ success: true });\n          setSubmitting(false);\n        } catch (err) {\n          console.error(err);\n          setStatus({ success: false });\n          setErrors({ submit: err.message });\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        touched,\n        values\n      }) => (\n        <Card>\n          <CardHeader title=\"Basic Form\" />\n          <Divider />\n          <CardContent>\n            {isAlertVisible && (\n              <Box mb={3}>\n                <Alert\n                  onClose={() => setAlertVisible(false)}\n                  severity=\"info\"\n                >\n                  This is an info alert - check it out!\n                </Alert>\n              </Box>\n            )}\n            {isSubmitting ? (\n              <Box\n                display=\"flex\"\n                justifyContent=\"center\"\n                my={5}\n              >\n                <CircularProgress />\n              </Box>\n            ) : (\n              <form onSubmit={handleSubmit}>\n                <Grid\n                  container\n                  spacing={2}\n                >\n                  <Grid\n                    item\n                    md={6}\n                    xs={12}\n                  >\n                    <TextField\n                      error={Boolean(touched.firstName && errors.firstName)}\n                      fullWidth\n                      helperText={touched.firstName && errors.firstName}\n                      label=\"First Name\"\n                      name=\"firstName\"\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      value={values.firstName}\n                      variant=\"outlined\"\n                    />\n                  </Grid>\n                  <Grid\n                    item\n                    md={6}\n                    xs={12}\n                  >\n                    <TextField\n                      error={Boolean(touched.lastName && errors.lastName)}\n                      fullWidth\n                      helperText={touched.lastName && errors.lastName}\n                      label=\"Last Name\"\n                      name=\"lastName\"\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      value={values.lastName}\n                      variant=\"outlined\"\n                    />\n                  </Grid>\n                </Grid>\n                <Box mt={2}>\n                  <TextField\n                    error={Boolean(touched.email && errors.email)}\n                    fullWidth\n                    helperText={touched.email && errors.email}\n                    label=\"Email Address\"\n                    name=\"email\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    type=\"email\"\n                    value={values.email}\n                    variant=\"outlined\"\n                  />\n                </Box>\n                <Box mt={2}>\n                  <TextField\n                    error={Boolean(touched.password && errors.password)}\n                    fullWidth\n                    helperText={touched.password && errors.password}\n                    label=\"Password\"\n                    name=\"password\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    type=\"password\"\n                    value={values.password}\n                    variant=\"outlined\"\n                  />\n                </Box>\n                <Box\n                  alignItems=\"center\"\n                  display=\"flex\"\n                  mt={2}\n                  ml={-1}\n                >\n                  <Checkbox\n                    checked={values.policy}\n                    name=\"policy\"\n                    onChange={handleChange}\n                  />\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                  >\n                    I have read the\n                    {' '}\n                    <Link\n                      component=\"a\"\n                      href=\"#\"\n                      color=\"secondary\"\n                    >\n                      Terms and Conditions\n                    </Link>\n                  </Typography>\n                </Box>\n                {Boolean(touched.policy && errors.policy) && (\n                  <FormHelperText error>\n                    {errors.policy}\n                  </FormHelperText>\n                )}\n                <Box mt={2}>\n                  <Button\n                    color=\"secondary\"\n                    disabled={isSubmitting}\n                    fullWidth\n                    size=\"large\"\n                    type=\"submit\"\n                    variant=\"contained\"\n                  >\n                    Sign up\n                  </Button>\n                </Box>\n              </form>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </Formik>\n  );\n};\n\nexport default BasicForm;\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {\n  Box,\n  Breadcrumbs,\n  Container,\n  Grid,\n  Link,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport Page from 'src/components/Page';\nimport BasicForm from './BasicForm';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3)\n  }\n}));\n\nconst FormikView = () => {\n  const classes = useStyles();\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Formik Form\"\n    >\n      <Container maxWidth=\"lg\">\n        <Breadcrumbs\n          separator={<NavigateNextIcon fontSize=\"small\" />}\n          aria-label=\"breadcrumb\"\n        >\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/app\"\n            component={RouterLink}\n          >\n            Dashboard\n          </Link>\n          <Typography\n            variant=\"body1\"\n            color=\"textPrimary\"\n          >\n            Forms\n          </Typography>\n        </Breadcrumbs>\n        <Typography\n          variant=\"h3\"\n          color=\"textPrimary\"\n        >\n          Formik\n        </Typography>\n        <Box mt={3}>\n          <Grid container>\n            <Grid\n              item\n              xs={12}\n              md={6}\n            >\n              <BasicForm />\n            </Grid>\n          </Grid>\n        </Box>\n      </Container>\n    </Page>\n  );\n};\n\nexport default FormikView;\n"],"sourceRoot":""}