{"version":3,"sources":["views/extra/forms/FormikView/BasicForm.js","views/extra/forms/FormikView/index.js"],"names":["BasicForm","useState","isAlertVisible","setAlertVisible","initialValues","email","firstName","lastName","password","policy","submit","validationSchema","Yup","shape","required","min","max","oneOf","onSubmit","values","a","resetForm","setErrors","setStatus","setSubmitting","wait","success","console","error","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","Card","CardHeader","title","Divider","CardContent","Box","mb","Alert","onClose","severity","display","justifyContent","my","CircularProgress","Grid","container","spacing","item","md","xs","TextField","Boolean","fullWidth","helperText","label","name","onBlur","onChange","value","variant","mt","type","alignItems","ml","Checkbox","checked","Typography","color","Link","component","href","FormHelperText","Button","disabled","size","useStyles","makeStyles","theme","root","backgroundColor","palette","background","dark","minHeight","paddingTop","paddingBottom","FormikView","classes","Page","className","Container","maxWidth","Breadcrumbs","separator","fontSize","aria-label","to","RouterLink"],"mappings":"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","file":"static/js/79.b6dc6b60.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Checkbox,\r\n  CircularProgress,\r\n  Divider,\r\n  FormHelperText,\r\n  Grid,\r\n  Link,\r\n  TextField,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport wait from 'src/utils/wait';\r\n\r\nconst BasicForm = () => {\r\n  const [isAlertVisible, setAlertVisible] = useState(true);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        email: 'johnnydoe@yahoo.com',\r\n        firstName: 'John',\r\n        lastName: 'Doe',\r\n        password: 'thisisasecuredpassword',\r\n        policy: false,\r\n        submit: null\r\n      }}\r\n      validationSchema={Yup.object().shape({\r\n        email: Yup.string().email().required('Required'),\r\n        firstName: Yup.string().required('Required'),\r\n        lastName: Yup.string().required('Required'),\r\n        password: Yup.string().min(7, 'Must be at least 7 characters').max(255).required('Required'),\r\n        policy: Yup.boolean().oneOf([true], 'This field must be checked')\r\n      })}\r\n      onSubmit={async (values, {\r\n        resetForm,\r\n        setErrors,\r\n        setStatus,\r\n        setSubmitting\r\n      }) => {\r\n        try {\r\n          // NOTE: Make API request\r\n          await wait(1000);\r\n          resetForm();\r\n          setStatus({ success: true });\r\n          setSubmitting(false);\r\n        } catch (err) {\r\n          console.error(err);\r\n          setStatus({ success: false });\r\n          setErrors({ submit: err.message });\r\n          setSubmitting(false);\r\n        }\r\n      }}\r\n    >\r\n      {({\r\n        errors,\r\n        handleBlur,\r\n        handleChange,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        touched,\r\n        values\r\n      }) => (\r\n        <Card>\r\n          <CardHeader title=\"Basic Form\" />\r\n          <Divider />\r\n          <CardContent>\r\n            {isAlertVisible && (\r\n              <Box mb={3}>\r\n                <Alert\r\n                  onClose={() => setAlertVisible(false)}\r\n                  severity=\"info\"\r\n                >\r\n                  This is an info alert - check it out!\r\n                </Alert>\r\n              </Box>\r\n            )}\r\n            {isSubmitting ? (\r\n              <Box\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                my={5}\r\n              >\r\n                <CircularProgress />\r\n              </Box>\r\n            ) : (\r\n              <form onSubmit={handleSubmit}>\r\n                <Grid\r\n                  container\r\n                  spacing={2}\r\n                >\r\n                  <Grid\r\n                    item\r\n                    md={6}\r\n                    xs={12}\r\n                  >\r\n                    <TextField\r\n                      error={Boolean(touched.firstName && errors.firstName)}\r\n                      fullWidth\r\n                      helperText={touched.firstName && errors.firstName}\r\n                      label=\"First Name\"\r\n                      name=\"firstName\"\r\n                      onBlur={handleBlur}\r\n                      onChange={handleChange}\r\n                      value={values.firstName}\r\n                      variant=\"outlined\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    md={6}\r\n                    xs={12}\r\n                  >\r\n                    <TextField\r\n                      error={Boolean(touched.lastName && errors.lastName)}\r\n                      fullWidth\r\n                      helperText={touched.lastName && errors.lastName}\r\n                      label=\"Last Name\"\r\n                      name=\"lastName\"\r\n                      onBlur={handleBlur}\r\n                      onChange={handleChange}\r\n                      value={values.lastName}\r\n                      variant=\"outlined\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Box mt={2}>\r\n                  <TextField\r\n                    error={Boolean(touched.email && errors.email)}\r\n                    fullWidth\r\n                    helperText={touched.email && errors.email}\r\n                    label=\"Email Address\"\r\n                    name=\"email\"\r\n                    onBlur={handleBlur}\r\n                    onChange={handleChange}\r\n                    type=\"email\"\r\n                    value={values.email}\r\n                    variant=\"outlined\"\r\n                  />\r\n                </Box>\r\n                <Box mt={2}>\r\n                  <TextField\r\n                    error={Boolean(touched.password && errors.password)}\r\n                    fullWidth\r\n                    helperText={touched.password && errors.password}\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    onBlur={handleBlur}\r\n                    onChange={handleChange}\r\n                    type=\"password\"\r\n                    value={values.password}\r\n                    variant=\"outlined\"\r\n                  />\r\n                </Box>\r\n                <Box\r\n                  alignItems=\"center\"\r\n                  display=\"flex\"\r\n                  mt={2}\r\n                  ml={-1}\r\n                >\r\n                  <Checkbox\r\n                    checked={values.policy}\r\n                    name=\"policy\"\r\n                    onChange={handleChange}\r\n                  />\r\n                  <Typography\r\n                    variant=\"body2\"\r\n                    color=\"textSecondary\"\r\n                  >\r\n                    I have read the\r\n                    {' '}\r\n                    <Link\r\n                      component=\"a\"\r\n                      href=\"#\"\r\n                      color=\"secondary\"\r\n                    >\r\n                      Terms and Conditions\r\n                    </Link>\r\n                  </Typography>\r\n                </Box>\r\n                {Boolean(touched.policy && errors.policy) && (\r\n                  <FormHelperText error>\r\n                    {errors.policy}\r\n                  </FormHelperText>\r\n                )}\r\n                <Box mt={2}>\r\n                  <Button\r\n                    color=\"secondary\"\r\n                    disabled={isSubmitting}\r\n                    fullWidth\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                  >\r\n                    Sign up\r\n                  </Button>\r\n                </Box>\r\n              </form>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default BasicForm;\r\n","import React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Breadcrumbs,\r\n  Container,\r\n  Grid,\r\n  Link,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport Page from 'src/components/Page';\r\nimport BasicForm from './BasicForm';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    minHeight: '100%',\r\n    paddingTop: theme.spacing(3),\r\n    paddingBottom: theme.spacing(3)\r\n  }\r\n}));\r\n\r\nconst FormikView = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      title=\"Formik Form\"\r\n    >\r\n      <Container maxWidth=\"lg\">\r\n        <Breadcrumbs\r\n          separator={<NavigateNextIcon fontSize=\"small\" />}\r\n          aria-label=\"breadcrumb\"\r\n        >\r\n          <Link\r\n            variant=\"body1\"\r\n            color=\"inherit\"\r\n            to=\"/app\"\r\n            component={RouterLink}\r\n          >\r\n            Dashboard\r\n          </Link>\r\n          <Typography\r\n            variant=\"body1\"\r\n            color=\"textPrimary\"\r\n          >\r\n            Forms\r\n          </Typography>\r\n        </Breadcrumbs>\r\n        <Typography\r\n          variant=\"h3\"\r\n          color=\"textPrimary\"\r\n        >\r\n          Formik\r\n        </Typography>\r\n        <Box mt={3}>\r\n          <Grid container>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              md={6}\r\n            >\r\n              <BasicForm />\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Container>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default FormikView;\r\n"],"sourceRoot":""}