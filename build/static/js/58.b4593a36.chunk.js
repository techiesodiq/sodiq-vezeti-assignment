(this["webpackJsonp@devias-io/material-kit-pro-react"]=this["webpackJsonp@devias-io/material-kit-pro-react"]||[]).push([[58],{2091:function(n,a,s){"use strict";s.r(a),s.d(a,"readingTime",(function(){return p})),s.d(a,"default",(function(){return c})),s.d(a,"tableOfContents",(function(){return l})),s.d(a,"frontMatter",(function(){return i}));var t=s(28),e=(s(0),s(338)),p={text:"4 min read",minutes:3.89,time:233400,words:778},o={};function c(n){var a=n.components,s=Object(t.a)(n,["components"]);return Object(e.b)("wrapper",Object.assign({},o,s,{components:a,mdxType:"MDXLayout"}),Object(e.b)("h1",{id:"state-management"},"State Management"),Object(e.b)("h2",{id:"context-api"},"Context API"),Object(e.b)("p",null,"Context provides a way to pass data through the component tree without having to pass props down manually at every level.\nContext is designed to share data that can be considered \u201cglobal\u201d for a tree of React components, such as the current authenticated user, theme, or preferred language. You can read more about it ",Object(e.b)("a",{target:"_blank",href:"https://reactjs.org/docs/context.html"},"here"),"."),Object(e.b)("p",null,"We used it to manage the app settings. Once the project is mounted we extract the stored settings from localStorage, pass the data to context provider and then use it when needed."),Object(e.b)("h2",{id:"redux"},"Redux"),Object(e.b)("p",null,"Redux is more robust alternative and currently offers more helpful features. Here is a ",Object(e.b)("a",{target:"_blank",href:"https://redux.js.org/basics/usage-with-react"},"link")," that can help you understand the entire concept behind it."),Object(e.b)("p",null,"The project uses Redux Toolkit with Hooks (Thunk method, not Sagas) to help you manage the applications chat, kanban, mail, etc. The clear project structure allows you to replace it whenever you need to with ease. There are 2 main folders ",Object(e.b)("inlineCode",{parentName:"p"},"src/slices"),", where the reducer logic is being implemented, and ",Object(e.b)("inlineCode",{parentName:"p"},"src/store")," that creates the store and combines the reducers in one root reducer. If you\u2019re new please read the official documentation from ",Object(e.b)("a",{target:"_blank",href:"https://redux-toolkit.js.org/usage/usage-guide"},"Redux Toolkit")," to understand the basics."),Object(e.b)("h3",{id:"creating-a-new-slice"},"Creating a new slice"),Object(e.b)("p",null,"For this example let\u2019s say that you have a blog and you want to load the articles in Redux and then render the data somewhere in your application."),Object(e.b)("p",null,"First, open ",Object(e.b)("inlineCode",{parentName:"p"},"src/slices")," folder and create a new file, ",Object(e.b)("inlineCode",{parentName:"p"},"blog.js"),". Now open this new file and import ",Object(e.b)("inlineCode",{parentName:"p"},"createSlice")," from ",Object(e.b)("inlineCode",{parentName:"p"},"@reduxjs/toolkit")," package."),Object(e.b)("pre",null,Object(e.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">import</span> <span class="token punctuation">{</span> createSlice <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@reduxjs/toolkit\'</span><span class="token punctuation">;</span>\n'}}))),Object(e.b)("p",null,"And then use this helper to create our blog slice and export it as a default module."),Object(e.b)("pre",null,Object(e.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span>\n  articles<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> slice <span class="token operator">=</span> <span class="token function">createSlice</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'blog\'</span><span class="token punctuation">,</span>\n  initialState<span class="token punctuation">,</span>\n  reducers<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> slice<span class="token punctuation">;</span>\n'}}))),Object(e.b)("p",null,"Now in the ",Object(e.b)("inlineCode",{parentName:"p"},"src/store/rootReducer.js")," import the reducer from our new slice."),Object(e.b)("pre",null,Object(e.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">import</span> <span class="token punctuation">{</span> reducer <span class="token keyword">as</span> blogReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'src/slices/blog\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> rootReducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// rest of reducers</span>\n  blog<span class="token operator">:</span> blogReducer\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n'}}))),Object(e.b)("p",null,"At this point we have a slice, where it\u2019s initial state is an object with a key articles. In this key we are going to store our data."),Object(e.b)("h3",{id:"using-the-slice-state"},"Using the slice state"),Object(e.b)("p",null,"Since our state at the moment as new articles, nothing will be rendered."),Object(e.b)("pre",null,Object(e.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token comment">// BlogView.js</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">BlogView</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> articles <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token punctuation">{</span>articles<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">article</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n            Article ID: </span><span class="token punctuation">{</span>article<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n        <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n'}}))),Object(e.b)("h3",{id:"create-a-reducer-action"},"Create a reducer action"),Object(e.b)("p",null,"Lets get back to our slice and add a ",Object(e.b)("inlineCode",{parentName:"p"},"setArticles")," action."),Object(e.b)("pre",null,Object(e.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">const</span> slice <span class="token operator">=</span> <span class="token function">createSlice</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'blog\'</span><span class="token punctuation">,</span>\n  initialState<span class="token punctuation">,</span>\n  reducers<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">setArticles</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// We should get articles from the action payload but for the moment lets use a static data</span>\n\n      state<span class="token punctuation">.</span>articles <span class="token operator">=</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          id<span class="token operator">:</span> <span class="token string">\'1\'</span><span class="token punctuation">,</span>\n          title<span class="token operator">:</span> <span class="token string">\'My first article\'</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n'}}))),Object(e.b)("p",null,"When executing this action, we set the current state to have the articles key an array of objects."),Object(e.b)("p",null,Object(e.b)("strong",{parentName:"p"},"IMPORTANT")),Object(e.b)("p",null,"The state is a Proxy object, you cannot update it directly and you have to update its keys instead. For example ",Object(e.b)("inlineCode",{parentName:"p"},"state = { name: 'Alex' }")," will break the state, but ",Object(e.b)("inlineCode",{parentName:"p"},"state.user = { name: 'Alex' }")," works as expected."),Object(e.b)("h3",{id:"creating-a-thunk-method"},"Creating a thunk method"),Object(e.b)("p",null,"This allows you to dispatch multiple actions, extremely useful for async requests."),Object(e.b)("p",null,"In our slice file, create a ",Object(e.b)("inlineCode",{parentName:"p"},"getArticles")," method that dispatches the slice ",Object(e.b)("inlineCode",{parentName:"p"},"setArticles")," action."),Object(e.b)("pre",null,Object(e.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getArticles</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">dispatch</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Here make an async request to your sever and extract the date from the server response</span>\n  <span class="token comment">// const response = await axios.get(\'/api/blog/articles\');</span>\n  <span class="token comment">// const { data } = reponse;</span>\n\n  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      id<span class="token operator">:</span> <span class="token string">\'1\'</span><span class="token punctuation">,</span>\n      title<span class="token operator">:</span> <span class="token string">\'My first article\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token function">dispatch</span><span class="token punctuation">(</span>slice<span class="token punctuation">.</span>actions<span class="token punctuation">.</span><span class="token function">setArticles</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n'}}))),Object(e.b)("p",null,"Now that we have a method that dispatches an action, we can update the ",Object(e.b)("inlineCode",{parentName:"p"},"setArticles")," action to use the data from the payload."),Object(e.b)("pre",null,Object(e.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'  reducers<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">setArticles</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      state<span class="token punctuation">.</span>articles <span class="token operator">=</span> payload<span class="token punctuation">.</span>articles<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n'}}))),Object(e.b)("h3",{id:"dispatching-an-action"},"Dispatching an action"),Object(e.b)("p",null,"This is the last step of the process, executing the method ",Object(e.b)("inlineCode",{parentName:"p"},"getArticles")," to dispatch our slice action and update the state data. Once the action sets the new state, the app is being re-rendered and we display our articles."),Object(e.b)("pre",null,Object(e.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token comment">// BlogView.js</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useDispatch<span class="token punctuation">,</span> useSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> getArticles <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'src/slices/blog\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">BlogView</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> articles <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">getArticles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token punctuation">{</span>articles<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">article</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n            Article ID: </span><span class="token punctuation">{</span>article<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n        <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        Load articles\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n'}}))))}c.isMDXComponent=!0;var l=function(){return[{id:"context-api",level:2,title:"Context API",children:[]},{id:"redux",level:2,title:"Redux",children:[{id:"creating-a-new-slice",level:3,title:"Creating a new slice",children:[]},{id:"using-the-slice-state",level:3,title:"Using the slice state",children:[]},{id:"create-a-reducer-action",level:3,title:"Create a reducer action",children:[]},{id:"creating-a-thunk-method",level:3,title:"Creating a thunk method",children:[]},{id:"dispatching-an-action",level:3,title:"Dispatching an action",children:[]}]}]},i={}}}]);
//# sourceMappingURL=58.b4593a36.chunk.js.map