{"version":3,"sources":["hooks/useIsMountedRef.js","views/order/OrderDetailsView/Header.js","views/order/OrderDetailsView/OrderInfo.js","views/order/OrderDetailsView/OrderItems.js","views/order/OrderDetailsView/index.js"],"names":["useIsMountedRef","isMounted","useRef","useEffect","current","useStyles","makeStyles","root","Header","className","rest","classes","Grid","clsx","container","justify","spacing","item","Breadcrumbs","separator","fontSize","aria-label","Link","variant","color","to","component","RouterLink","Typography","Button","startIcon","SvgIcon","statusOptions","OrderInfo","order","useState","status","setStatus","Card","CardHeader","title","Divider","Table","TableBody","TableRow","TableCell","customer","name","address1","city","country","id","number","moment","createdAt","format","coupon","numeral","totalAmount","currency","TextField","fullWidth","onChange","event","persist","target","value","select","SelectProps","native","map","option","key","CardActions","OrderItems","orderItems","Box","minWidth","TableHead","quantity","billingCycle","unitAmount","TablePagination","count","length","onChangePage","onChangeRowsPerPage","page","rowsPerPage","rowsPerPageOptions","defaultProps","theme","backgroundColor","palette","background","dark","minHeight","paddingTop","paddingBottom","OrderDetailsView","isMountedRef","setOrder","getOrder","useCallback","a","axios","get","response","data","console","error","Page","Container","maxWidth","mt","md","xl","xs","items"],"mappings":"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","file":"static/js/48.d193678b.chunk.js","sourcesContent":["import { useRef, useEffect } from 'react';\n\nconst useIsMountedRef = () => {\n  const isMounted = useRef(true);\n\n  useEffect(\n    () => () => {\n      isMounted.current = false;\n    },\n    []\n  );\n\n  return isMounted;\n};\n\nexport default useIsMountedRef;\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Breadcrumbs,\n  Button,\n  Grid,\n  Link,\n  SvgIcon,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport { Edit as EditIcon } from 'react-feather';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Header = ({ className, ...rest }) => {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      className={clsx(classes.root, className)}\n      container\n      justify=\"space-between\"\n      spacing={3}\n      {...rest}\n    >\n      <Grid item>\n        <Breadcrumbs\n          separator={<NavigateNextIcon fontSize=\"small\" />}\n          aria-label=\"breadcrumb\"\n        >\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/app\"\n            component={RouterLink}\n          >\n            Dashboard\n          </Link>\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/app/management\"\n            component={RouterLink}\n          >\n            Management\n          </Link>\n          <Typography\n            variant=\"body1\"\n            color=\"textPrimary\"\n          >\n            Orders\n          </Typography>\n        </Breadcrumbs>\n        <Typography\n          variant=\"h3\"\n          color=\"textPrimary\"\n        >\n          Order Details\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Button\n          color=\"secondary\"\n          variant=\"contained\"\n          startIcon={\n            <SvgIcon fontSize=\"small\">\n              <EditIcon />\n            </SvgIcon>\n          }\n        >\n          Edit\n        </Button>\n      </Grid>\n    </Grid>\n  );\n}\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport numeral from 'numeral';\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardHeader,\n  Divider,\n  Link,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  TextField,\n  makeStyles\n} from '@material-ui/core';\nimport ReceiptIcon from '@material-ui/icons/ReceiptOutlined';\n\nconst statusOptions = ['Canceled', 'Completed', 'Rejected'];\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst OrderInfo = ({ className, order, ...rest }) => {\n  const classes = useStyles();\n  const [status, setStatus] = useState(statusOptions[0]);\n\n  const handleChange = (event) => {\n    event.persist();\n    setStatus(event.target.value);\n  };\n\n  return (\n    <Card\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <CardHeader title=\"Order info\" />\n      <Divider />\n      <Table>\n        <TableBody>\n          <TableRow>\n            <TableCell>\n              Customer\n            </TableCell>\n            <TableCell>\n              <Link\n                component={RouterLink}\n                to=\"/app/management/customers/1\"\n              >\n                {order.customer.name}\n              </Link>\n              <div>{order.customer.address1}</div>\n              <div>{order.customer.city}</div>\n              <div>{order.customer.country}</div>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>\n              ID\n            </TableCell>\n            <TableCell>\n              #\n              {order.id}\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>\n              Number\n            </TableCell>\n            <TableCell>\n              {order.number}\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>\n              Date\n            </TableCell>\n            <TableCell>\n              {moment(order.createdAt).format('DD/MM/YYYY HH:MM')}\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>\n              Promotion Code\n            </TableCell>\n            <TableCell>\n              {order.coupon ? order.coupon : 'N/A'}\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>\n              Total Amount\n            </TableCell>\n            <TableCell>\n              {numeral(order.totalAmount).format(`${order.currency}0,0.00`)}\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>\n              Status\n            </TableCell>\n            <TableCell>\n              <TextField\n                fullWidth\n                name=\"option\"\n                onChange={handleChange}\n                select\n                SelectProps={{ native: true }}\n                value={status}\n                variant=\"outlined\"\n              >\n                {statusOptions.map((option) => (\n                  <option\n                    key={option}\n                    value={option}\n                  >\n                    {option}\n                  </option>\n                ))}\n              </TextField>\n            </TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n      <CardActions>\n        <Button startIcon={<ReceiptIcon />}>\n          Resend invoice\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nOrderInfo.propTypes = {\n  className: PropTypes.string,\n  order: PropTypes.object.isRequired\n};\n\nexport default OrderInfo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport numeral from 'numeral';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Box,\n  Card,\n  CardHeader,\n  Divider,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  makeStyles\n} from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst OrderItems = ({ className, orderItems, ...rest }) => {\n  const classes = useStyles();\n\n  return (\n    <Card\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <CardHeader title=\"Order items\" />\n      <Divider />\n      <PerfectScrollbar>\n        <Box minWidth={700}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>\n                  Description\n                </TableCell>\n                <TableCell>\n                  Billing Cycle\n                </TableCell>\n                <TableCell>\n                  Amount\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {orderItems.map((item) => (\n                <TableRow key={item.id}>\n                  <TableCell>\n                    {item.name}\n                    {' '}\n                    x\n                    {' '}\n                    {item.quantity}\n                  </TableCell>\n                  <TableCell>\n                    {item.billingCycle}\n                  </TableCell>\n                  <TableCell>\n                    {numeral(item.unitAmount).format(`${item.currency}0,0.00`)}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Box>\n      </PerfectScrollbar>\n      <TablePagination\n        component=\"div\"\n        count={orderItems.length}\n        onChangePage={() => {}}\n        onChangeRowsPerPage={() => {}}\n        page={0}\n        rowsPerPage={5}\n        rowsPerPageOptions={[5, 10, 25]}\n      />\n    </Card>\n  );\n};\n\nOrderItems.propTypes = {\n  className: PropTypes.string,\n  orderItems: PropTypes.array.isRequired\n};\n\nOrderItems.defaultProps = {\n  orderItems: []\n};\n\nexport default OrderItems;\n","import React, {\n  useCallback,\n  useEffect,\n  useState\n} from 'react';\nimport {\n  Box,\n  Container,\n  Grid,\n  makeStyles\n} from '@material-ui/core';\nimport axios from 'src/utils/axios';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport Page from 'src/components/Page';\nimport Header from './Header';\nimport OrderInfo from './OrderInfo';\nimport OrderItems from './OrderItems';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3)\n  }\n}));\n\nconst OrderDetailsView = () => {\n  const classes = useStyles();\n  const isMountedRef = useIsMountedRef();\n  const [order, setOrder] = useState(null);\n\n  const getOrder = useCallback(async () => {\n    try {\n      const response = await axios.get('/api/orders/1');\n\n      if (isMountedRef.current) {\n        setOrder(response.data.order);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }, [isMountedRef]);\n\n  useEffect(() => {\n    getOrder();\n  }, [getOrder]);\n\n  if (!order) {\n    return null;\n  }\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Order Details\"\n    >\n      <Container maxWidth={false}>\n        <Header />\n        <Box mt={2}>\n          <Grid\n            container\n            spacing={3}\n          >\n            <Grid\n              item\n              md={4}\n              xl={3}\n              xs={12}\n            >\n              <OrderInfo order={order} />\n            </Grid>\n            <Grid\n              item\n              md={8}\n              xl={9}\n              xs={12}\n            >\n              <OrderItems orderItems={order.items} />\n            </Grid>\n          </Grid>\n        </Box>\n      </Container>\n    </Page>\n  );\n}\n\nexport default OrderDetailsView;\n"],"sourceRoot":""}