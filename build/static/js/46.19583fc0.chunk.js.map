{"version":3,"sources":["hooks/useIsMountedRef.js","utils/getInitials.js","views/customer/CustomerListView/Header.js","views/customer/CustomerListView/Results.js","views/customer/CustomerListView/index.js"],"names":["useIsMountedRef","isMounted","useRef","useEffect","current","getInitials","name","replace","split","slice","map","v","toUpperCase","join","useStyles","makeStyles","theme","root","action","marginBottom","spacing","marginLeft","Header","className","rest","classes","Grid","clsx","container","justify","item","Breadcrumbs","separator","fontSize","aria-label","Link","variant","color","to","component","RouterLink","Typography","Box","mt","Button","startIcon","SvgIcon","tabs","value","label","sortOptions","descendingComparator","a","b","orderBy","applySort","customers","sort","comparator","order","getComparator","stabilizedThis","el","index","queryField","width","bulkOperations","position","bulkActions","paddingLeft","paddingRight","marginTop","zIndex","backgroundColor","palette","background","default","bulkAction","avatar","height","marginRight","Results","useState","currentTab","setCurrentTab","selectedCustomers","setSelectedCustomers","page","setPage","limit","setLimit","query","setQuery","setSort","hasAcceptedMarketing","isProspect","isReturning","filters","setFilters","handleSelectAllCustomers","event","target","checked","customer","id","filteredCustomers","filter","matches","containsQuery","forEach","property","toLowerCase","includes","Object","keys","key","applyFilters","paginatedCustomers","applyPagination","enableBulkOperations","length","selectedSomeCustomers","selectedAllCustomers","Card","Tabs","onChange","updatedFilters","scrollButtons","textColor","tab","Tab","Divider","p","minHeight","display","alignItems","TextField","InputProps","startAdornment","InputAdornment","persist","placeholder","flexGrow","select","SelectProps","native","option","Checkbox","indeterminate","minWidth","Table","TableHead","TableRow","TableCell","padding","align","TableBody","isCustomerSelected","hover","selected","customerId","prevSelected","Avatar","src","email","city","state","country","totalOrders","numeral","totalAmountSpent","format","currency","IconButton","TablePagination","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","rowsPerPage","rowsPerPageOptions","defaultProps","dark","paddingTop","paddingBottom","CustomerListView","isMountedRef","setCustomers","getCustomers","useCallback","axios","get","response","data","console","error","Page","title","Container","maxWidth"],"mappings":"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","file":"static/js/46.19583fc0.chunk.js","sourcesContent":["import {useRef, useEffect } from 'react';\n\nconst useIsMountedRef = () => {\n  const isMounted = useRef(true);\n\n  useEffect(() => () => {\n    isMounted.current = false;\n  }, []);\n\n  return isMounted;\n};\n\nexport default useIsMountedRef;\n","const getInitials = (name = '') => {\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ')\n    .slice(0, 2)\n    .map((v) => v && v[0].toUpperCase())\n    .join('');\n};\n\nexport default getInitials;\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Box,\n  Breadcrumbs,\n  Button,\n  Grid,\n  Link,\n  SvgIcon,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport {\n  PlusCircle as PlusCircleIcon,\n  Download as DownloadIcon,\n  Upload as UploadIcon\n} from 'react-feather';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  action: {\n    marginBottom: theme.spacing(1),\n    '& + &': {\n      marginLeft: theme.spacing(1)\n    }\n  }\n}));\n\nconst Header = ({ className, ...rest }) => {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      className={clsx(classes.root, className)}\n      container\n      justify=\"space-between\"\n      spacing={3}\n      {...rest}\n    >\n      <Grid item>\n        <Breadcrumbs\n          separator={<NavigateNextIcon fontSize=\"small\" />}\n          aria-label=\"breadcrumb\"\n        >\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/app\"\n            component={RouterLink}\n          >\n            Dashboard\n          </Link>\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/app/management\"\n            component={RouterLink}\n          >\n            Management\n          </Link>\n          <Typography\n            variant=\"body1\"\n            color=\"textPrimary\"\n          >\n            Customers\n          </Typography>\n        </Breadcrumbs>\n        <Typography\n          variant=\"h3\"\n          color=\"textPrimary\"\n        >\n          All Customers\n        </Typography>\n        <Box mt={2}>\n          <Button startIcon={\n            <SvgIcon fontSize=\"small\">\n              <UploadIcon />\n            </SvgIcon>\n          }>\n            Import\n          </Button>\n          <Button startIcon={\n            <SvgIcon fontSize=\"small\">\n              <DownloadIcon />\n            </SvgIcon>\n          }>\n            Export\n          </Button>\n        </Box>\n      </Grid>\n      <Grid item>\n        <Button\n          color=\"secondary\"\n          variant=\"contained\"\n          startIcon={\n            <SvgIcon fontSize=\"small\">\n              <PlusCircleIcon />\n            </SvgIcon>\n          }\n        >\n          New Customer\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport numeral from 'numeral';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Card,\n  Checkbox,\n  Divider,\n  IconButton,\n  InputAdornment,\n  Link,\n  SvgIcon,\n  Tab,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Tabs,\n  TextField,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport {\n  Edit as EditIcon,\n  ArrowRight as ArrowRightIcon,\n  Search as SearchIcon\n} from 'react-feather';\nimport getInitials from 'src/utils/getInitials';\n\nconst tabs = [\n  {\n    value: 'all',\n    label: 'All'\n  },\n  {\n    value: 'hasAcceptedMarketing',\n    label: 'Accepts Marketing'\n  },\n  {\n    value: 'isProspect',\n    label: 'Prospect'\n  },\n  {\n    value: 'isReturning',\n    label: 'Returning'\n  }\n];\n\nconst sortOptions = [\n  {\n    value: 'updatedAt|desc',\n    label: 'Last update (newest first)'\n  },\n  {\n    value: 'updatedAt|asc',\n    label: 'Last update (oldest first)'\n  },\n  {\n    value: 'orders|desc',\n    label: 'Total orders (high to low)'\n  },\n  {\n    value: 'orders|asc',\n    label: 'Total orders (low to high)'\n  }\n];\n\nconst applyFilters = (customers, query, filters) => {\n  return customers.filter((customer) => {\n    let matches = true;\n\n    if (query) {\n      const properties = ['email', 'name'];\n      let containsQuery = false;\n\n      properties.forEach((property) => {\n        if (customer[property].toLowerCase().includes(query.toLowerCase())) {\n          containsQuery = true;\n        }\n      });\n\n      if (!containsQuery) {\n        matches = false;\n      }\n    }\n\n    Object.keys(filters).forEach((key) => {\n      const value = filters[key];\n\n      if (value && customer[key] !== value) {\n        matches = false;\n      }\n    });\n\n    return matches;\n  });\n};\n\nconst applyPagination = (customers, page, limit) => {\n  return customers.slice(page * limit, page * limit + limit);\n};\n\nconst descendingComparator = (a, b, orderBy) => {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n\n  return 0;\n};\n\nconst getComparator = (order, orderBy) => {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n};\n\nconst applySort = (customers, sort) => {\n  const [orderBy, order] = sort.split('|');\n  const comparator = getComparator(order, orderBy);\n  const stabilizedThis = customers.map((el, index) => [el, index]);\n\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n\n    if (order !== 0) return order;\n\n    return a[1] - b[1];\n  });\n\n  return stabilizedThis.map((el) => el[0]);\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  queryField: {\n    width: 500\n  },\n  bulkOperations: {\n    position: 'relative'\n  },\n  bulkActions: {\n    paddingLeft: 4,\n    paddingRight: 4,\n    marginTop: 6,\n    position: 'absolute',\n    width: '100%',\n    zIndex: 2,\n    backgroundColor: theme.palette.background.default\n  },\n  bulkAction: {\n    marginLeft: theme.spacing(2)\n  },\n  avatar: {\n    height: 42,\n    width: 42,\n    marginRight: theme.spacing(1)\n  }\n}));\n\nconst Results = ({\n  className,\n  customers,\n  ...rest\n}) => {\n  const classes = useStyles();\n  const [currentTab, setCurrentTab] = useState('all');\n  const [selectedCustomers, setSelectedCustomers] = useState([]);\n  const [page, setPage] = useState(0);\n  const [limit, setLimit] = useState(10);\n  const [query, setQuery] = useState('');\n  const [sort, setSort] = useState(sortOptions[0].value);\n  const [filters, setFilters] = useState({\n    hasAcceptedMarketing: null,\n    isProspect: null,\n    isReturning: null\n  });\n\n  const handleTabsChange = (event, value) => {\n    const updatedFilters = {\n      ...filters,\n      hasAcceptedMarketing: null,\n      isProspect: null,\n      isReturning: null\n    };\n\n    if (value !== 'all') {\n      updatedFilters[value] = true;\n    }\n\n    setFilters(updatedFilters);\n    setSelectedCustomers([]);\n    setCurrentTab(value);\n  };\n\n  const handleQueryChange = (event) => {\n    event.persist();\n    setQuery(event.target.value);\n  };\n\n  const handleSortChange = (event) => {\n    event.persist();\n    setSort(event.target.value);\n  };\n\n  const handleSelectAllCustomers = (event) => {\n    setSelectedCustomers(event.target.checked\n      ? customers.map((customer) => customer.id)\n      : []);\n  };\n\n  const handleSelectOneCustomer = (event, customerId) => {\n    if (!selectedCustomers.includes(customerId)) {\n      setSelectedCustomers((prevSelected) => [...prevSelected, customerId]);\n    } else {\n      setSelectedCustomers((prevSelected) => prevSelected.filter((id) => id !== customerId));\n    }\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleLimitChange = (event) => {\n    setLimit(parseInt(event.target.value));\n  };\n\n  const filteredCustomers = applyFilters(customers, query, filters);\n  const sortedCustomers = applySort(filteredCustomers, sort);\n  const paginatedCustomers = applyPagination(sortedCustomers, page, limit);\n  const enableBulkOperations = selectedCustomers.length > 0;\n  const selectedSomeCustomers = selectedCustomers.length > 0 && selectedCustomers.length < customers.length;\n  const selectedAllCustomers = selectedCustomers.length === customers.length;\n\n  return (\n    <Card\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Tabs\n        onChange={handleTabsChange}\n        scrollButtons=\"auto\"\n        textColor=\"secondary\"\n        value={currentTab}\n        variant=\"scrollable\"\n      >\n        {tabs.map((tab) => (\n          <Tab\n            key={tab.value}\n            value={tab.value}\n            label={tab.label}\n          />\n        ))}\n      </Tabs>\n      <Divider />\n      <Box\n        p={2}\n        minHeight={56}\n        display=\"flex\"\n        alignItems=\"center\"\n      >\n        <TextField\n          className={classes.queryField}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SvgIcon\n                  fontSize=\"small\"\n                  color=\"action\"\n                >\n                  <SearchIcon />\n                </SvgIcon>\n              </InputAdornment>\n            )\n          }}\n          onChange={handleQueryChange}\n          placeholder=\"Search customers\"\n          value={query}\n          variant=\"outlined\"\n        />\n        <Box flexGrow={1} />\n        <TextField\n          label=\"Sort By\"\n          name=\"sort\"\n          onChange={handleSortChange}\n          select\n          SelectProps={{ native: true }}\n          value={sort}\n          variant=\"outlined\"\n        >\n          {sortOptions.map((option) => (\n            <option\n              key={option.value}\n              value={option.value}\n            >\n              {option.label}\n            </option>\n          ))}\n        </TextField>\n      </Box>\n      {enableBulkOperations && (\n        <div className={classes.bulkOperations}>\n          <div className={classes.bulkActions}>\n            <Checkbox\n              checked={selectedAllCustomers}\n              indeterminate={selectedSomeCustomers}\n              onChange={handleSelectAllCustomers}\n            />\n            <Button\n              variant=\"outlined\"\n              className={classes.bulkAction}\n            >\n              Delete\n            </Button>\n            <Button\n              variant=\"outlined\"\n              className={classes.bulkAction}\n            >\n              Edit\n            </Button>\n          </div>\n        </div>\n      )}\n      <PerfectScrollbar>\n        <Box minWidth={700}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell padding=\"checkbox\">\n                  <Checkbox\n                    checked={selectedAllCustomers}\n                    indeterminate={selectedSomeCustomers}\n                    onChange={handleSelectAllCustomers}\n                  />\n                </TableCell>\n                <TableCell>\n                  Name\n                </TableCell>\n                <TableCell>\n                  Location\n                </TableCell>\n                <TableCell>\n                  Orders\n                </TableCell>\n                <TableCell>\n                  Spent\n                </TableCell>\n                <TableCell align=\"right\">\n                  Actions\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {paginatedCustomers.map((customer) => {\n                const isCustomerSelected = selectedCustomers.includes(customer.id);\n\n                return (\n                  <TableRow\n                    hover\n                    key={customer.id}\n                    selected={isCustomerSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        checked={isCustomerSelected}\n                        onChange={(event) => handleSelectOneCustomer(event, customer.id)}\n                        value={isCustomerSelected}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Box\n                        display=\"flex\"\n                        alignItems=\"center\"\n                      >\n                        <Avatar\n                          className={classes.avatar}\n                          src={customer.avatar}\n                        >\n                          {getInitials(customer.name)}\n                        </Avatar>\n                        <div>\n                          <Link\n                            color=\"inherit\"\n                            component={RouterLink}\n                            to=\"/app/management/customers/1\"\n                            variant=\"h6\"\n                          >\n                            {customer.name}\n                          </Link>\n                          <Typography\n                            variant=\"body2\"\n                            color=\"textSecondary\"\n                          >\n                            {customer.email}\n                          </Typography>\n                        </div>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      {`${customer.city}, ${customer.state}, ${customer.country}`}\n                    </TableCell>\n                    <TableCell>\n                      {customer.totalOrders}\n                    </TableCell>\n                    <TableCell>\n                      {numeral(customer.totalAmountSpent).format(`${customer.currency}0,0.00`)}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      <IconButton\n                        component={RouterLink}\n                        to=\"/app/management/customers/1/edit\"\n                      >\n                        <SvgIcon fontSize=\"small\">\n                          <EditIcon />\n                        </SvgIcon>\n                      </IconButton>\n                      <IconButton\n                        component={RouterLink}\n                        to=\"/app/management/customers/1\"\n                      >\n                        <SvgIcon fontSize=\"small\">\n                          <ArrowRightIcon />\n                        </SvgIcon>\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </Box>\n      </PerfectScrollbar>\n      <TablePagination\n        component=\"div\"\n        count={filteredCustomers.length}\n        onChangePage={handlePageChange}\n        onChangeRowsPerPage={handleLimitChange}\n        page={page}\n        rowsPerPage={limit}\n        rowsPerPageOptions={[5, 10, 25]}\n      />\n    </Card>\n  );\n};\n\nResults.propTypes = {\n  className: PropTypes.string,\n  customers: PropTypes.array.isRequired\n};\n\nResults.defaultProps = {\n  customers: []\n};\n\nexport default Results;\n","import React, {\n  useState,\n  useEffect,\n  useCallback\n} from 'react';\nimport {\n  Box,\n  Container,\n  makeStyles\n} from '@material-ui/core';\nimport axios from 'src/utils/axios';\nimport Page from 'src/components/Page';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport Header from './Header';\nimport Results from './Results';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3)\n  }\n}));\n\nconst CustomerListView = () => {\n  const classes = useStyles();\n  const isMountedRef = useIsMountedRef();\n  const [customers, setCustomers] = useState([]);\n\n  const getCustomers = useCallback(async () => {\n    try {\n      const response = await axios.get('/api/customers');\n\n      if (isMountedRef.current) {\n        setCustomers(response.data.customers);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }, [isMountedRef]);\n\n  useEffect(() => {\n    getCustomers();\n  }, [getCustomers]);\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Customer List\"\n    >\n      <Container maxWidth={false}>\n        <Header />\n        <Box mt={3}>\n          <Results customers={customers} />\n        </Box>\n      </Container>\n    </Page>\n  );\n};\n\nexport default CustomerListView;\n"],"sourceRoot":""}