{"version":3,"sources":["hooks/useIsMountedRef.js","utils/getInitials.js","views/customer/CustomerListView/Header.js","views/customer/CustomerListView/Results.js","views/customer/CustomerListView/index.js"],"names":["useIsMountedRef","isMounted","useRef","useEffect","current","getInitials","name","replace","split","slice","map","v","toUpperCase","join","useStyles","makeStyles","theme","root","action","marginBottom","spacing","marginLeft","Header","className","rest","classes","Grid","clsx","container","justify","item","Breadcrumbs","separator","fontSize","aria-label","Link","variant","color","to","component","RouterLink","Typography","Box","mt","Button","startIcon","SvgIcon","tabs","value","label","sortOptions","descendingComparator","a","b","orderBy","applySort","customers","sort","comparator","order","getComparator","stabilizedThis","el","index","queryField","width","bulkOperations","position","bulkActions","paddingLeft","paddingRight","marginTop","zIndex","backgroundColor","palette","background","default","bulkAction","avatar","height","marginRight","Results","useState","currentTab","setCurrentTab","selectedCustomers","setSelectedCustomers","page","setPage","limit","setLimit","query","setQuery","setSort","hasAcceptedMarketing","isProspect","isReturning","filters","setFilters","handleSelectAllCustomers","event","target","checked","customer","id","filteredCustomers","filter","matches","containsQuery","forEach","property","toLowerCase","includes","Object","keys","key","applyFilters","paginatedCustomers","applyPagination","enableBulkOperations","length","selectedSomeCustomers","selectedAllCustomers","Card","Tabs","onChange","updatedFilters","scrollButtons","textColor","tab","Tab","Divider","p","minHeight","display","alignItems","TextField","InputProps","startAdornment","InputAdornment","persist","placeholder","flexGrow","select","SelectProps","native","option","Checkbox","indeterminate","minWidth","Table","TableHead","TableRow","TableCell","padding","align","TableBody","isCustomerSelected","hover","selected","customerId","prevSelected","Avatar","src","email","city","state","country","totalOrders","numeral","totalAmountSpent","format","currency","IconButton","TablePagination","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","rowsPerPage","rowsPerPageOptions","defaultProps","dark","paddingTop","paddingBottom","CustomerListView","isMountedRef","setCustomers","getCustomers","useCallback","axios","get","response","data","console","error","Page","title","Container","maxWidth"],"mappings":"4IAAA,WAYeA,IAVS,WACtB,IAAMC,EAAYC,kBAAO,GAMzB,OAJAC,qBAAU,kBAAM,WACdF,EAAUG,SAAU,KACnB,IAEIH,I,kCCAMI,IATK,WAAgB,IAAfC,EAAc,uDAAP,GAC1B,OAAOA,EACJC,QAAQ,MAAO,KACfC,MAAM,KACNC,MAAM,EAAG,GACTC,KAAI,SAACC,GAAD,OAAOA,GAAKA,EAAE,GAAGC,iBACrBC,KAAK,M,uRCeJC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,GACNC,OAAQ,CACNC,aAAcH,EAAMI,QAAQ,GAC5B,QAAS,CACPC,WAAYL,EAAMI,QAAQ,SAwFjBE,EAnFA,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,UAAcC,EAAW,6BACnCC,EAAUX,IAEhB,OACE,kBAACY,EAAA,EAAD,eACEH,UAAWI,YAAKF,EAAQR,KAAMM,GAC9BK,WAAS,EACTC,QAAQ,gBACRT,QAAS,GACLI,GAEJ,kBAACE,EAAA,EAAD,CAAMI,MAAI,GACR,kBAACC,EAAA,EAAD,CACEC,UAAW,kBAAC,IAAD,CAAkBC,SAAS,UACtCC,aAAW,cAEX,kBAACC,EAAA,EAAD,CACEC,QAAQ,QACRC,MAAM,UACNC,GAAG,OACHC,UAAWC,KAJb,aAQA,kBAACL,EAAA,EAAD,CACEC,QAAQ,QACRC,MAAM,UACNC,GAAG,kBACHC,UAAWC,KAJb,cAQA,kBAACC,EAAA,EAAD,CACEL,QAAQ,QACRC,MAAM,eAFR,cAOF,kBAACI,EAAA,EAAD,CACEL,QAAQ,KACRC,MAAM,eAFR,iBAMA,kBAACK,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAD,CAAQC,UACN,kBAACC,EAAA,EAAD,CAASb,SAAS,SAChB,kBAAC,IAAD,QAFJ,UAOA,kBAACW,EAAA,EAAD,CAAQC,UACN,kBAACC,EAAA,EAAD,CAASb,SAAS,SAChB,kBAAC,IAAD,QAFJ,YASJ,kBAACP,EAAA,EAAD,CAAMI,MAAI,GACR,kBAACc,EAAA,EAAD,CACEP,MAAM,YACND,QAAQ,YACRS,UACE,kBAACC,EAAA,EAAD,CAASb,SAAS,SAChB,kBAAC,IAAD,QALN,mB,qPC1DFc,GAAO,CACX,CACEC,MAAO,MACPC,MAAO,OAET,CACED,MAAO,uBACPC,MAAO,qBAET,CACED,MAAO,aACPC,MAAO,YAET,CACED,MAAO,cACPC,MAAO,cAILC,GAAc,CAClB,CACEF,MAAO,iBACPC,MAAO,8BAET,CACED,MAAO,gBACPC,MAAO,8BAET,CACED,MAAO,cACPC,MAAO,8BAET,CACED,MAAO,aACPC,MAAO,+BAuCLE,GAAuB,SAACC,EAAGC,EAAGC,GAClC,OAAID,EAAEC,GAAWF,EAAEE,IACT,EAGND,EAAEC,GAAWF,EAAEE,GACV,EAGF,GASHC,GAAY,SAACC,EAAWC,GAAU,IAAD,EACZA,EAAKjD,MAAM,KADC,mBAC9B8C,EAD8B,KAE/BI,EARc,SAACC,EAAOL,GAC5B,MAAiB,SAAVK,EACH,SAACP,EAAGC,GAAJ,OAAUF,GAAqBC,EAAGC,EAAGC,IACrC,SAACF,EAAGC,GAAJ,OAAWF,GAAqBC,EAAGC,EAAGC,IAKvBM,CAFkB,KAEGN,GAClCO,EAAiBL,EAAU9C,KAAI,SAACoD,EAAIC,GAAL,MAAe,CAACD,EAAIC,MAUzD,OARAF,EAAeJ,MAAK,SAACL,EAAGC,GACtB,IAAMM,EAAQD,EAAWN,EAAE,GAAIC,EAAE,IAEjC,OAAc,IAAVM,EAAoBA,EAEjBP,EAAE,GAAKC,EAAE,MAGXQ,EAAenD,KAAI,SAACoD,GAAD,OAAQA,EAAG,OAGjChD,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,GACN+C,WAAY,CACVC,MAAO,KAETC,eAAgB,CACdC,SAAU,YAEZC,YAAa,CACXC,YAAa,EACbC,aAAc,EACdC,UAAW,EACXJ,SAAU,WACVF,MAAO,OACPO,OAAQ,EACRC,gBAAiBzD,EAAM0D,QAAQC,WAAWC,SAE5CC,WAAY,CACVxD,WAAYL,EAAMI,QAAQ,IAE5B0D,OAAQ,CACNC,OAAQ,GACRd,MAAO,GACPe,YAAahE,EAAMI,QAAQ,QAIzB6D,GAAU,SAAC,GAIV,IAHL1D,EAGI,EAHJA,UACAiC,EAEI,EAFJA,UACGhC,EACC,yCACEC,EAAUX,KADZ,EAEgCoE,mBAAS,OAFzC,mBAEGC,EAFH,KAEeC,EAFf,OAG8CF,mBAAS,IAHvD,mBAGGG,EAHH,KAGsBC,EAHtB,OAIoBJ,mBAAS,GAJ7B,mBAIGK,EAJH,KAISC,EAJT,OAKsBN,mBAAS,IAL/B,mBAKGO,EALH,KAKUC,EALV,OAMsBR,mBAAS,IAN/B,oBAMGS,GANH,MAMUC,GANV,SAOoBV,mBAAShC,GAAY,GAAGF,OAP5C,qBAOGS,GAPH,MAOSoC,GAPT,SAQ0BX,mBAAS,CACrCY,qBAAsB,KACtBC,WAAY,KACZC,YAAa,OAXX,qBAQGC,GARH,MAQYC,GARZ,MAyCEC,GAA2B,SAACC,GAChCd,EAAqBc,EAAMC,OAAOC,QAC9B9C,EAAU9C,KAAI,SAAC6F,GAAD,OAAcA,EAASC,MACrC,KAmBAC,GAnKa,SAACjD,EAAWmC,EAAOM,GACtC,OAAOzC,EAAUkD,QAAO,SAACH,GACvB,IAAII,GAAU,EAEd,GAAIhB,EAAO,CACT,IACIiB,GAAgB,EADD,CAAC,QAAS,QAGlBC,SAAQ,SAACC,GACdP,EAASO,GAAUC,cAAcC,SAASrB,EAAMoB,iBAClDH,GAAgB,MAIfA,IACHD,GAAU,GAYd,OARAM,OAAOC,KAAKjB,GAASY,SAAQ,SAACM,GAC5B,IAAMnE,EAAQiD,EAAQkB,GAElBnE,GAASuD,EAASY,KAASnE,IAC7B2D,GAAU,MAIPA,KAwIiBS,CAAa5D,EAAWmC,GAAOM,IAEnDoB,GAtIgB,SAAC7D,EAAW+B,EAAME,GACxC,OAAOjC,EAAU/C,MAAM8E,EAAOE,EAAOF,EAAOE,EAAQA,GAqIzB6B,CADH/D,GAAUkD,GAAmBhD,IACO8B,EAAME,GAC5D8B,GAAuBlC,EAAkBmC,OAAS,EAClDC,GAAwBpC,EAAkBmC,OAAS,GAAKnC,EAAkBmC,OAAShE,EAAUgE,OAC7FE,GAAuBrC,EAAkBmC,SAAWhE,EAAUgE,OAEpE,OACE,kBAACG,EAAA,EAAD,eACEpG,UAAWI,YAAKF,EAAQR,KAAMM,IAC1BC,GAEJ,kBAACoG,EAAA,EAAD,CACEC,SA9DmB,SAACzB,EAAOpD,GAC/B,IAAM8E,EAAc,2BACf7B,IADe,IAElBH,qBAAsB,KACtBC,WAAY,KACZC,YAAa,OAGD,QAAVhD,IACF8E,EAAe9E,IAAS,GAG1BkD,GAAW4B,GACXxC,EAAqB,IACrBF,EAAcpC,IAiDV+E,cAAc,OACdC,UAAU,YACVhF,MAAOmC,EACP/C,QAAQ,cAEPW,GAAKrC,KAAI,SAACuH,GAAD,OACR,kBAACC,EAAA,EAAD,CACEf,IAAKc,EAAIjF,MACTA,MAAOiF,EAAIjF,MACXC,MAAOgF,EAAIhF,YAIjB,kBAACkF,EAAA,EAAD,MACA,kBAACzF,EAAA,EAAD,CACE0F,EAAG,EACHC,UAAW,GACXC,QAAQ,OACRC,WAAW,UAEX,kBAACC,EAAA,EAAD,CACEjH,UAAWE,EAAQuC,WACnByE,WAAY,CACVC,eACE,kBAACC,EAAA,EAAD,CAAgBxE,SAAS,SACvB,kBAACrB,EAAA,EAAD,CACEb,SAAS,QACTI,MAAM,UAEN,kBAAC,IAAD,SAKRwF,SAhFkB,SAACzB,GACzBA,EAAMwC,UACNhD,GAASQ,EAAMC,OAAOrD,QA+EhB6F,YAAY,mBACZ7F,MAAO2C,GACPvD,QAAQ,aAEV,kBAACM,EAAA,EAAD,CAAKoG,SAAU,IACf,kBAACN,EAAA,EAAD,CACEvF,MAAM,UACN3C,KAAK,OACLuH,SApFiB,SAACzB,GACxBA,EAAMwC,UACN/C,GAAQO,EAAMC,OAAOrD,QAmFf+F,QAAM,EACNC,YAAa,CAAEC,QAAQ,GACvBjG,MAAOS,GACPrB,QAAQ,YAEPc,GAAYxC,KAAI,SAACwI,GAAD,OACf,4BACE/B,IAAK+B,EAAOlG,MACZA,MAAOkG,EAAOlG,OAEbkG,EAAOjG,YAKfsE,IACC,yBAAKhG,UAAWE,EAAQyC,gBACtB,yBAAK3C,UAAWE,EAAQ2C,aACtB,kBAAC+E,EAAA,EAAD,CACE7C,QAASoB,GACT0B,cAAe3B,GACfI,SAAU1B,KAEZ,kBAACvD,EAAA,EAAD,CACER,QAAQ,WACRb,UAAWE,EAAQoD,YAFrB,UAMA,kBAACjC,EAAA,EAAD,CACER,QAAQ,WACRb,UAAWE,EAAQoD,YAFrB,UASN,kBAAC,IAAD,KACE,kBAACnC,EAAA,EAAD,CAAK2G,SAAU,KACb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,QAAQ,YACjB,kBAACP,EAAA,EAAD,CACE7C,QAASoB,GACT0B,cAAe3B,GACfI,SAAU1B,MAGd,kBAACsD,EAAA,EAAD,aAGA,kBAACA,EAAA,EAAD,iBAGA,kBAACA,EAAA,EAAD,eAGA,kBAACA,EAAA,EAAD,cAGA,kBAACA,EAAA,EAAD,CAAWE,MAAM,SAAjB,aAKJ,kBAACC,EAAA,EAAD,KACGvC,GAAmB3G,KAAI,SAAC6F,GACvB,IAAMsD,EAAqBxE,EAAkB2B,SAAST,EAASC,IAE/D,OACE,kBAACgD,EAAA,EAAD,CACEM,OAAK,EACL3C,IAAKZ,EAASC,GACduD,SAAUF,GAEV,kBAACJ,EAAA,EAAD,CAAWC,QAAQ,YACjB,kBAACP,EAAA,EAAD,CACE7C,QAASuD,EACThC,SAAU,SAACzB,GAAD,OA1JQ4D,EA0JkCzD,EAASC,QAzJ5EnB,EAAkB2B,SAASgD,GAG9B1E,GAAqB,SAAC2E,GAAD,OAAkBA,EAAavD,QAAO,SAACF,GAAD,OAAQA,IAAOwD,QAF1E1E,GAAqB,SAAC2E,GAAD,4BAAsBA,GAAtB,CAAoCD,QAF7B,IAAQA,GA2JlBhH,MAAO6G,KAGX,kBAACJ,EAAA,EAAD,KACE,kBAAC/G,EAAA,EAAD,CACE4F,QAAQ,OACRC,WAAW,UAEX,kBAAC2B,EAAA,EAAD,CACE3I,UAAWE,EAAQqD,OACnBqF,IAAK5D,EAASzB,QAEbzE,aAAYkG,EAASjG,OAExB,6BACE,kBAAC6B,EAAA,EAAD,CACEE,MAAM,UACNE,UAAWC,IACXF,GAAG,8BACHF,QAAQ,MAEPmE,EAASjG,MAEZ,kBAACmC,EAAA,EAAD,CACEL,QAAQ,QACRC,MAAM,iBAELkE,EAAS6D,UAKlB,kBAACX,EAAA,EAAD,eACMlD,EAAS8D,KADf,aACwB9D,EAAS+D,MADjC,aAC2C/D,EAASgE,UAEpD,kBAACd,EAAA,EAAD,KACGlD,EAASiE,aAEZ,kBAACf,EAAA,EAAD,KACGgB,IAAQlE,EAASmE,kBAAkBC,OAAnC,UAA6CpE,EAASqE,SAAtD,YAEH,kBAACnB,EAAA,EAAD,CAAWE,MAAM,SACf,kBAACkB,EAAA,EAAD,CACEtI,UAAWC,IACXF,GAAG,oCAEH,kBAACQ,EAAA,EAAD,CAASb,SAAS,SAChB,kBAAC,IAAD,QAGJ,kBAAC4I,EAAA,EAAD,CACEtI,UAAWC,IACXF,GAAG,+BAEH,kBAACQ,EAAA,EAAD,CAASb,SAAS,SAChB,kBAAC,KAAD,iBAWpB,kBAAC6I,EAAA,EAAD,CACEvI,UAAU,MACVwI,MAAOtE,GAAkBe,OACzBwD,aAxNmB,SAAC5E,EAAO6E,GAC/BzF,EAAQyF,IAwNJC,oBArNoB,SAAC9E,GACzBV,EAASyF,SAAS/E,EAAMC,OAAOrD,SAqN3BuC,KAAMA,EACN6F,YAAa3F,EACb4F,mBAAoB,CAAC,EAAG,GAAI,QAWpCpG,GAAQqG,aAAe,CACrB9H,UAAW,IAGEyB,UChcTnE,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJwD,gBAAiBzD,EAAM0D,QAAQC,WAAW4G,KAC1ClD,UAAW,OACXmD,WAAYxK,EAAMI,QAAQ,GAC1BqK,cAAezK,EAAMI,QAAQ,QAwClBsK,UApCU,WACvB,IAAMjK,EAAUX,KACV6K,EAAe3L,cAFQ,EAGKkF,mBAAS,IAHd,mBAGtB1B,EAHsB,KAGXoI,EAHW,KAKvBC,EAAeC,sBAAW,sBAAC,4BAAA1I,EAAA,+EAEN2I,IAAMC,IAAI,kBAFJ,OAEvBC,EAFuB,OAIzBN,EAAavL,SACfwL,EAAaK,EAASC,KAAK1I,WALA,gDAQ7B2I,QAAQC,MAAR,MAR6B,yDAU9B,CAACT,IAMJ,OAJAxL,qBAAU,WACR0L,MACC,CAACA,IAGF,kBAACQ,EAAA,EAAD,CACE9K,UAAWE,EAAQR,KACnBqL,MAAM,iBAEN,kBAACC,EAAA,EAAD,CAAWC,UAAU,GACnB,kBAAC,EAAD,MACA,kBAAC9J,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC,GAAD,CAASa,UAAWA","file":"static/js/45.ce854ca4.chunk.js","sourcesContent":["import {useRef, useEffect } from 'react';\r\n\r\nconst useIsMountedRef = () => {\r\n  const isMounted = useRef(true);\r\n\r\n  useEffect(() => () => {\r\n    isMounted.current = false;\r\n  }, []);\r\n\r\n  return isMounted;\r\n};\r\n\r\nexport default useIsMountedRef;\r\n","const getInitials = (name = '') => {\r\n  return name\r\n    .replace(/\\s+/, ' ')\r\n    .split(' ')\r\n    .slice(0, 2)\r\n    .map((v) => v && v[0].toUpperCase())\r\n    .join('');\r\n};\r\n\r\nexport default getInitials;\r\n","import React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n  Box,\r\n  Breadcrumbs,\r\n  Button,\r\n  Grid,\r\n  Link,\r\n  SvgIcon,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport {\r\n  PlusCircle as PlusCircleIcon,\r\n  Download as DownloadIcon,\r\n  Upload as UploadIcon\r\n} from 'react-feather';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  action: {\r\n    marginBottom: theme.spacing(1),\r\n    '& + &': {\r\n      marginLeft: theme.spacing(1)\r\n    }\r\n  }\r\n}));\r\n\r\nconst Header = ({ className, ...rest }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid\r\n      className={clsx(classes.root, className)}\r\n      container\r\n      justify=\"space-between\"\r\n      spacing={3}\r\n      {...rest}\r\n    >\r\n      <Grid item>\r\n        <Breadcrumbs\r\n          separator={<NavigateNextIcon fontSize=\"small\" />}\r\n          aria-label=\"breadcrumb\"\r\n        >\r\n          <Link\r\n            variant=\"body1\"\r\n            color=\"inherit\"\r\n            to=\"/app\"\r\n            component={RouterLink}\r\n          >\r\n            Dashboard\r\n          </Link>\r\n          <Link\r\n            variant=\"body1\"\r\n            color=\"inherit\"\r\n            to=\"/app/management\"\r\n            component={RouterLink}\r\n          >\r\n            Management\r\n          </Link>\r\n          <Typography\r\n            variant=\"body1\"\r\n            color=\"textPrimary\"\r\n          >\r\n            Customers\r\n          </Typography>\r\n        </Breadcrumbs>\r\n        <Typography\r\n          variant=\"h3\"\r\n          color=\"textPrimary\"\r\n        >\r\n          All Customers\r\n        </Typography>\r\n        <Box mt={2}>\r\n          <Button startIcon={\r\n            <SvgIcon fontSize=\"small\">\r\n              <UploadIcon />\r\n            </SvgIcon>\r\n          }>\r\n            Import\r\n          </Button>\r\n          <Button startIcon={\r\n            <SvgIcon fontSize=\"small\">\r\n              <DownloadIcon />\r\n            </SvgIcon>\r\n          }>\r\n            Export\r\n          </Button>\r\n        </Box>\r\n      </Grid>\r\n      <Grid item>\r\n        <Button\r\n          color=\"secondary\"\r\n          variant=\"contained\"\r\n          startIcon={\r\n            <SvgIcon fontSize=\"small\">\r\n              <PlusCircleIcon />\r\n            </SvgIcon>\r\n          }\r\n        >\r\n          New Customer\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport clsx from 'clsx';\r\nimport numeral from 'numeral';\r\nimport PropTypes from 'prop-types';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Button,\r\n  Card,\r\n  Checkbox,\r\n  Divider,\r\n  IconButton,\r\n  InputAdornment,\r\n  Link,\r\n  SvgIcon,\r\n  Tab,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  Tabs,\r\n  TextField,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport {\r\n  Edit as EditIcon,\r\n  ArrowRight as ArrowRightIcon,\r\n  Search as SearchIcon\r\n} from 'react-feather';\r\nimport getInitials from 'src/utils/getInitials';\r\n\r\nconst tabs = [\r\n  {\r\n    value: 'all',\r\n    label: 'All'\r\n  },\r\n  {\r\n    value: 'hasAcceptedMarketing',\r\n    label: 'Accepts Marketing'\r\n  },\r\n  {\r\n    value: 'isProspect',\r\n    label: 'Prospect'\r\n  },\r\n  {\r\n    value: 'isReturning',\r\n    label: 'Returning'\r\n  }\r\n];\r\n\r\nconst sortOptions = [\r\n  {\r\n    value: 'updatedAt|desc',\r\n    label: 'Last update (newest first)'\r\n  },\r\n  {\r\n    value: 'updatedAt|asc',\r\n    label: 'Last update (oldest first)'\r\n  },\r\n  {\r\n    value: 'orders|desc',\r\n    label: 'Total orders (high to low)'\r\n  },\r\n  {\r\n    value: 'orders|asc',\r\n    label: 'Total orders (low to high)'\r\n  }\r\n];\r\n\r\nconst applyFilters = (customers, query, filters) => {\r\n  return customers.filter((customer) => {\r\n    let matches = true;\r\n\r\n    if (query) {\r\n      const properties = ['email', 'name'];\r\n      let containsQuery = false;\r\n\r\n      properties.forEach((property) => {\r\n        if (customer[property].toLowerCase().includes(query.toLowerCase())) {\r\n          containsQuery = true;\r\n        }\r\n      });\r\n\r\n      if (!containsQuery) {\r\n        matches = false;\r\n      }\r\n    }\r\n\r\n    Object.keys(filters).forEach((key) => {\r\n      const value = filters[key];\r\n\r\n      if (value && customer[key] !== value) {\r\n        matches = false;\r\n      }\r\n    });\r\n\r\n    return matches;\r\n  });\r\n};\r\n\r\nconst applyPagination = (customers, page, limit) => {\r\n  return customers.slice(page * limit, page * limit + limit);\r\n};\r\n\r\nconst descendingComparator = (a, b, orderBy) => {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n\r\n  return 0;\r\n};\r\n\r\nconst getComparator = (order, orderBy) => {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n};\r\n\r\nconst applySort = (customers, sort) => {\r\n  const [orderBy, order] = sort.split('|');\r\n  const comparator = getComparator(order, orderBy);\r\n  const stabilizedThis = customers.map((el, index) => [el, index]);\r\n\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n\r\n    if (order !== 0) return order;\r\n\r\n    return a[1] - b[1];\r\n  });\r\n\r\n  return stabilizedThis.map((el) => el[0]);\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  queryField: {\r\n    width: 500\r\n  },\r\n  bulkOperations: {\r\n    position: 'relative'\r\n  },\r\n  bulkActions: {\r\n    paddingLeft: 4,\r\n    paddingRight: 4,\r\n    marginTop: 6,\r\n    position: 'absolute',\r\n    width: '100%',\r\n    zIndex: 2,\r\n    backgroundColor: theme.palette.background.default\r\n  },\r\n  bulkAction: {\r\n    marginLeft: theme.spacing(2)\r\n  },\r\n  avatar: {\r\n    height: 42,\r\n    width: 42,\r\n    marginRight: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nconst Results = ({\r\n  className,\r\n  customers,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  const [currentTab, setCurrentTab] = useState('all');\r\n  const [selectedCustomers, setSelectedCustomers] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [limit, setLimit] = useState(10);\r\n  const [query, setQuery] = useState('');\r\n  const [sort, setSort] = useState(sortOptions[0].value);\r\n  const [filters, setFilters] = useState({\r\n    hasAcceptedMarketing: null,\r\n    isProspect: null,\r\n    isReturning: null\r\n  });\r\n\r\n  const handleTabsChange = (event, value) => {\r\n    const updatedFilters = {\r\n      ...filters,\r\n      hasAcceptedMarketing: null,\r\n      isProspect: null,\r\n      isReturning: null\r\n    };\r\n\r\n    if (value !== 'all') {\r\n      updatedFilters[value] = true;\r\n    }\r\n\r\n    setFilters(updatedFilters);\r\n    setSelectedCustomers([]);\r\n    setCurrentTab(value);\r\n  };\r\n\r\n  const handleQueryChange = (event) => {\r\n    event.persist();\r\n    setQuery(event.target.value);\r\n  };\r\n\r\n  const handleSortChange = (event) => {\r\n    event.persist();\r\n    setSort(event.target.value);\r\n  };\r\n\r\n  const handleSelectAllCustomers = (event) => {\r\n    setSelectedCustomers(event.target.checked\r\n      ? customers.map((customer) => customer.id)\r\n      : []);\r\n  };\r\n\r\n  const handleSelectOneCustomer = (event, customerId) => {\r\n    if (!selectedCustomers.includes(customerId)) {\r\n      setSelectedCustomers((prevSelected) => [...prevSelected, customerId]);\r\n    } else {\r\n      setSelectedCustomers((prevSelected) => prevSelected.filter((id) => id !== customerId));\r\n    }\r\n  };\r\n\r\n  const handlePageChange = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleLimitChange = (event) => {\r\n    setLimit(parseInt(event.target.value));\r\n  };\r\n\r\n  const filteredCustomers = applyFilters(customers, query, filters);\r\n  const sortedCustomers = applySort(filteredCustomers, sort);\r\n  const paginatedCustomers = applyPagination(sortedCustomers, page, limit);\r\n  const enableBulkOperations = selectedCustomers.length > 0;\r\n  const selectedSomeCustomers = selectedCustomers.length > 0 && selectedCustomers.length < customers.length;\r\n  const selectedAllCustomers = selectedCustomers.length === customers.length;\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Tabs\r\n        onChange={handleTabsChange}\r\n        scrollButtons=\"auto\"\r\n        textColor=\"secondary\"\r\n        value={currentTab}\r\n        variant=\"scrollable\"\r\n      >\r\n        {tabs.map((tab) => (\r\n          <Tab\r\n            key={tab.value}\r\n            value={tab.value}\r\n            label={tab.label}\r\n          />\r\n        ))}\r\n      </Tabs>\r\n      <Divider />\r\n      <Box\r\n        p={2}\r\n        minHeight={56}\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n      >\r\n        <TextField\r\n          className={classes.queryField}\r\n          InputProps={{\r\n            startAdornment: (\r\n              <InputAdornment position=\"start\">\r\n                <SvgIcon\r\n                  fontSize=\"small\"\r\n                  color=\"action\"\r\n                >\r\n                  <SearchIcon />\r\n                </SvgIcon>\r\n              </InputAdornment>\r\n            )\r\n          }}\r\n          onChange={handleQueryChange}\r\n          placeholder=\"Search customers\"\r\n          value={query}\r\n          variant=\"outlined\"\r\n        />\r\n        <Box flexGrow={1} />\r\n        <TextField\r\n          label=\"Sort By\"\r\n          name=\"sort\"\r\n          onChange={handleSortChange}\r\n          select\r\n          SelectProps={{ native: true }}\r\n          value={sort}\r\n          variant=\"outlined\"\r\n        >\r\n          {sortOptions.map((option) => (\r\n            <option\r\n              key={option.value}\r\n              value={option.value}\r\n            >\r\n              {option.label}\r\n            </option>\r\n          ))}\r\n        </TextField>\r\n      </Box>\r\n      {enableBulkOperations && (\r\n        <div className={classes.bulkOperations}>\r\n          <div className={classes.bulkActions}>\r\n            <Checkbox\r\n              checked={selectedAllCustomers}\r\n              indeterminate={selectedSomeCustomers}\r\n              onChange={handleSelectAllCustomers}\r\n            />\r\n            <Button\r\n              variant=\"outlined\"\r\n              className={classes.bulkAction}\r\n            >\r\n              Delete\r\n            </Button>\r\n            <Button\r\n              variant=\"outlined\"\r\n              className={classes.bulkAction}\r\n            >\r\n              Edit\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <PerfectScrollbar>\r\n        <Box minWidth={700}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                  <Checkbox\r\n                    checked={selectedAllCustomers}\r\n                    indeterminate={selectedSomeCustomers}\r\n                    onChange={handleSelectAllCustomers}\r\n                  />\r\n                </TableCell>\r\n                <TableCell>\r\n                  Name\r\n                </TableCell>\r\n                <TableCell>\r\n                  Location\r\n                </TableCell>\r\n                <TableCell>\r\n                  Orders\r\n                </TableCell>\r\n                <TableCell>\r\n                  Spent\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                  Actions\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {paginatedCustomers.map((customer) => {\r\n                const isCustomerSelected = selectedCustomers.includes(customer.id);\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    key={customer.id}\r\n                    selected={isCustomerSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        checked={isCustomerSelected}\r\n                        onChange={(event) => handleSelectOneCustomer(event, customer.id)}\r\n                        value={isCustomerSelected}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Box\r\n                        display=\"flex\"\r\n                        alignItems=\"center\"\r\n                      >\r\n                        <Avatar\r\n                          className={classes.avatar}\r\n                          src={customer.avatar}\r\n                        >\r\n                          {getInitials(customer.name)}\r\n                        </Avatar>\r\n                        <div>\r\n                          <Link\r\n                            color=\"inherit\"\r\n                            component={RouterLink}\r\n                            to=\"/app/management/customers/1\"\r\n                            variant=\"h6\"\r\n                          >\r\n                            {customer.name}\r\n                          </Link>\r\n                          <Typography\r\n                            variant=\"body2\"\r\n                            color=\"textSecondary\"\r\n                          >\r\n                            {customer.email}\r\n                          </Typography>\r\n                        </div>\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {`${customer.city}, ${customer.state}, ${customer.country}`}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {customer.totalOrders}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {numeral(customer.totalAmountSpent).format(`${customer.currency}0,0.00`)}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                      <IconButton\r\n                        component={RouterLink}\r\n                        to=\"/app/management/customers/1/edit\"\r\n                      >\r\n                        <SvgIcon fontSize=\"small\">\r\n                          <EditIcon />\r\n                        </SvgIcon>\r\n                      </IconButton>\r\n                      <IconButton\r\n                        component={RouterLink}\r\n                        to=\"/app/management/customers/1\"\r\n                      >\r\n                        <SvgIcon fontSize=\"small\">\r\n                          <ArrowRightIcon />\r\n                        </SvgIcon>\r\n                      </IconButton>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </Box>\r\n      </PerfectScrollbar>\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={filteredCustomers.length}\r\n        onChangePage={handlePageChange}\r\n        onChangeRowsPerPage={handleLimitChange}\r\n        page={page}\r\n        rowsPerPage={limit}\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nResults.propTypes = {\r\n  className: PropTypes.string,\r\n  customers: PropTypes.array.isRequired\r\n};\r\n\r\nResults.defaultProps = {\r\n  customers: []\r\n};\r\n\r\nexport default Results;\r\n","import React, {\r\n  useState,\r\n  useEffect,\r\n  useCallback\r\n} from 'react';\r\nimport {\r\n  Box,\r\n  Container,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport axios from 'src/utils/axios';\r\nimport Page from 'src/components/Page';\r\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\r\nimport Header from './Header';\r\nimport Results from './Results';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    minHeight: '100%',\r\n    paddingTop: theme.spacing(3),\r\n    paddingBottom: theme.spacing(3)\r\n  }\r\n}));\r\n\r\nconst CustomerListView = () => {\r\n  const classes = useStyles();\r\n  const isMountedRef = useIsMountedRef();\r\n  const [customers, setCustomers] = useState([]);\r\n\r\n  const getCustomers = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get('/api/customers');\r\n\r\n      if (isMountedRef.current) {\r\n        setCustomers(response.data.customers);\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }, [isMountedRef]);\r\n\r\n  useEffect(() => {\r\n    getCustomers();\r\n  }, [getCustomers]);\r\n\r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      title=\"Customer List\"\r\n    >\r\n      <Container maxWidth={false}>\r\n        <Header />\r\n        <Box mt={3}>\r\n          <Results customers={customers} />\r\n        </Box>\r\n      </Container>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default CustomerListView;\r\n"],"sourceRoot":""}